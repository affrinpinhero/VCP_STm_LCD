
vpcSTmCubeIde.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007008  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007258  08007258  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007260  08007260  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001970  200001e0  08007448  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001b50  08007448  00021b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d58  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003543  00000000  00000000  00038f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  0003c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b0  00000000  00000000  0003d708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002728d  00000000  00000000  0003e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000113b2  00000000  00000000  00065a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbd9c  00000000  00000000  00076df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152b93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea0  00000000  00000000  00152c10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080071a0 	.word	0x080071a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080071a0 	.word	0x080071a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <HAL_Init+0x40>)
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <HAL_Init+0x40>)
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_Init+0x40>)
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f8fa 	bl	80007c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f005 fba0 	bl	8005d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f005 fb76 	bl	8005cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000004 	.word	0x20000004
 8000608:	2000020c 	.word	0x2000020c

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2000020c 	.word	0x2000020c

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff ffee 	bl	800060c <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_Delay+0x40>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800064a:	bf00      	nop
 800064c:	f7ff ffde 	bl	800060c <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8f7      	bhi.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000004 	.word	0x20000004

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 021f 	and.w	r2, r3, #31
 80006e4:	4907      	ldr	r1, [pc, #28]	; (8000704 <__NVIC_EnableIRQ+0x38>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ff4c 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ea:	f7ff ff61 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	6978      	ldr	r0, [r7, #20]
 80007f6:	f7ff ffb1 	bl	800075c <NVIC_EncodePriority>
 80007fa:	4602      	mov	r2, r0
 80007fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff80 	bl	8000708 <__NVIC_SetPriority>
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff54 	bl	80006cc <__NVIC_EnableIRQ>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	e177      	b.n	8000b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000848:	2201      	movs	r2, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	429a      	cmp	r2, r3
 8000862:	f040 8166 	bne.w	8000b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d00b      	beq.n	8000886 <HAL_GPIO_Init+0x5a>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d007      	beq.n	8000886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087a:	2b11      	cmp	r3, #17
 800087c:	d003      	beq.n	8000886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b12      	cmp	r3, #18
 8000884:	d130      	bne.n	80008e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	2203      	movs	r2, #3
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4013      	ands	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68da      	ldr	r2, [r3, #12]
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008bc:	2201      	movs	r2, #1
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	f003 0201 	and.w	r2, r3, #1
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d003      	beq.n	8000928 <HAL_GPIO_Init+0xfc>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b12      	cmp	r3, #18
 8000926:	d123      	bne.n	8000970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	08da      	lsrs	r2, r3, #3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3208      	adds	r2, #8
 8000930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	691a      	ldr	r2, [r3, #16]
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4313      	orrs	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	08da      	lsrs	r2, r3, #3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3208      	adds	r2, #8
 800096a:	69b9      	ldr	r1, [r7, #24]
 800096c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0203 	and.w	r2, r3, #3
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 80c0 	beq.w	8000b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b65      	ldr	r3, [pc, #404]	; (8000b4c <HAL_GPIO_Init+0x320>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a64      	ldr	r2, [pc, #400]	; (8000b4c <HAL_GPIO_Init+0x320>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <HAL_GPIO_Init+0x320>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ce:	4a60      	ldr	r2, [pc, #384]	; (8000b50 <HAL_GPIO_Init+0x324>)
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3302      	adds	r3, #2
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a57      	ldr	r2, [pc, #348]	; (8000b54 <HAL_GPIO_Init+0x328>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d037      	beq.n	8000a6a <HAL_GPIO_Init+0x23e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a56      	ldr	r2, [pc, #344]	; (8000b58 <HAL_GPIO_Init+0x32c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d031      	beq.n	8000a66 <HAL_GPIO_Init+0x23a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a55      	ldr	r2, [pc, #340]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d02b      	beq.n	8000a62 <HAL_GPIO_Init+0x236>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a54      	ldr	r2, [pc, #336]	; (8000b60 <HAL_GPIO_Init+0x334>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d025      	beq.n	8000a5e <HAL_GPIO_Init+0x232>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a53      	ldr	r2, [pc, #332]	; (8000b64 <HAL_GPIO_Init+0x338>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d01f      	beq.n	8000a5a <HAL_GPIO_Init+0x22e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <HAL_GPIO_Init+0x33c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d019      	beq.n	8000a56 <HAL_GPIO_Init+0x22a>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a51      	ldr	r2, [pc, #324]	; (8000b6c <HAL_GPIO_Init+0x340>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0x226>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a50      	ldr	r2, [pc, #320]	; (8000b70 <HAL_GPIO_Init+0x344>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d00d      	beq.n	8000a4e <HAL_GPIO_Init+0x222>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4f      	ldr	r2, [pc, #316]	; (8000b74 <HAL_GPIO_Init+0x348>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d007      	beq.n	8000a4a <HAL_GPIO_Init+0x21e>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4e      	ldr	r2, [pc, #312]	; (8000b78 <HAL_GPIO_Init+0x34c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_GPIO_Init+0x21a>
 8000a42:	2309      	movs	r3, #9
 8000a44:	e012      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a46:	230a      	movs	r3, #10
 8000a48:	e010      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	e00e      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a4e:	2307      	movs	r3, #7
 8000a50:	e00c      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a52:	2306      	movs	r3, #6
 8000a54:	e00a      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a56:	2305      	movs	r3, #5
 8000a58:	e008      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e004      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a62:	2302      	movs	r3, #2
 8000a64:	e002      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <HAL_GPIO_Init+0x240>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	69fa      	ldr	r2, [r7, #28]
 8000a6e:	f002 0203 	and.w	r2, r2, #3
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a7c:	4934      	ldr	r1, [pc, #208]	; (8000b50 <HAL_GPIO_Init+0x324>)
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4013      	ands	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aae:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <HAL_GPIO_Init+0x350>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	f67f ae84 	bls.w	8000848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	; 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40013800 	.word	0x40013800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40021400 	.word	0x40021400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40021c00 	.word	0x40021c00
 8000b74:	40022000 	.word	0x40022000
 8000b78:	40022400 	.word	0x40022400
 8000b7c:	40013c00 	.word	0x40013c00

08000b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b90:	787b      	ldrb	r3, [r7, #1]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b9c:	e003      	b.n	8000ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	041a      	lsls	r2, r3, #16
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	619a      	str	r2, [r3, #24]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb4:	b08f      	sub	sp, #60	; 0x3c
 8000bb6:	af0a      	add	r7, sp, #40	; 0x28
 8000bb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e10f      	b.n	8000de4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d106      	bne.n	8000be4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f005 fa5c 	bl	800609c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2203      	movs	r2, #3
 8000be8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f997 	bl	8002f36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	687e      	ldr	r6, [r7, #4]
 8000c10:	466d      	mov	r5, sp
 8000c12:	f106 0410 	add.w	r4, r6, #16
 8000c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c22:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c26:	1d33      	adds	r3, r6, #4
 8000c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c2a:	6838      	ldr	r0, [r7, #0]
 8000c2c:	f002 f86e 	bl	8002d0c <USB_CoreInit>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2202      	movs	r2, #2
 8000c3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0d0      	b.n	8000de4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 f985 	bl	8002f58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e04a      	b.n	8000cea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	1a9b      	subs	r3, r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
 8000c62:	333d      	adds	r3, #61	; 0x3d
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	333c      	adds	r3, #60	; 0x3c
 8000c78:	7bfa      	ldrb	r2, [r7, #15]
 8000c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	b298      	uxth	r0, r3
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3342      	adds	r3, #66	; 0x42
 8000c90:	4602      	mov	r2, r0
 8000c92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	333f      	adds	r3, #63	; 0x3f
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3344      	adds	r3, #68	; 0x44
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cbc:	7bfa      	ldrb	r2, [r7, #15]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	1a9b      	subs	r3, r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	3348      	adds	r3, #72	; 0x48
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	1a9b      	subs	r3, r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	3350      	adds	r3, #80	; 0x50
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d3af      	bcc.n	8000c54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e044      	b.n	8000d84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d10:	7bfa      	ldrb	r2, [r7, #15]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000d22:	7bfa      	ldrb	r2, [r7, #15]
 8000d24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	1a9b      	subs	r3, r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	440b      	add	r3, r1
 8000d34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3b5      	bcc.n	8000cfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	687e      	ldr	r6, [r7, #4]
 8000d96:	466d      	mov	r5, sp
 8000d98:	f106 0410 	add.w	r4, r6, #16
 8000d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000da8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dac:	1d33      	adds	r3, r6, #4
 8000dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db0:	6838      	ldr	r0, [r7, #0]
 8000db2:	f002 f8fb 	bl	8002fac <USB_DevInit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e00d      	b.n	8000de4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 f8f0 	bl	8003fc2 <USB_DevDisconnect>

  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_PCD_Start+0x1c>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e020      	b.n	8000e4a <HAL_PCD_Start+0x5e>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d109      	bne.n	8000e2c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 f8ae 	bl	8003f92 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 f86a 	bl	8002f14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e52:	b590      	push	{r4, r7, lr}
 8000e54:	b08d      	sub	sp, #52	; 0x34
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e60:	6a3b      	ldr	r3, [r7, #32]
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 f955 	bl	8004118 <USB_GetMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f040 838e 	bne.w	8001592 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 f8b9 	bl	8003ff2 <USB_ReadInterrupts>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 8384 	beq.w	8001590 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 f8b0 	bl	8003ff2 <USB_ReadInterrupts>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d107      	bne.n	8000eac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f002 0202 	and.w	r2, r2, #2
 8000eaa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 f89e 	bl	8003ff2 <USB_ReadInterrupts>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ebc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ec0:	d17b      	bne.n	8000fba <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f8a4 	bl	8004018 <USB_ReadDevAllOutEpInterrupt>
 8000ed0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ed2:	e06f      	b.n	8000fb4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d064      	beq.n	8000fa8 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 f8c9 	bl	8004080 <USB_ReadDevOutEPInterrupt>
 8000eee:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00c      	beq.n	8000f14 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	015a      	lsls	r2, r3, #5
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	4413      	add	r3, r2
 8000f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f06:	461a      	mov	r2, r3
 8000f08:	2301      	movs	r3, #1
 8000f0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 fe0e 	bl	8001b30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00c      	beq.n	8000f38 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 ff0d 	bl	8001d40 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	015a      	lsls	r2, r3, #5
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f32:	461a      	mov	r2, r3
 8000f34:	2308      	movs	r3, #8
 8000f36:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4413      	add	r3, r2
 8000f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2310      	movs	r3, #16
 8000f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d015      	beq.n	8000f8a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d108      	bne.n	8000f78 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000f70:	461a      	mov	r2, r3
 8000f72:	2101      	movs	r1, #1
 8000f74:	f003 f914 	bl	80041a0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	4413      	add	r3, r2
 8000f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f84:	461a      	mov	r2, r3
 8000f86:	2320      	movs	r3, #32
 8000f88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	015a      	lsls	r2, r3, #5
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	3301      	adds	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	085b      	lsrs	r3, r3, #1
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d18c      	bne.n	8000ed4 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 f817 	bl	8003ff2 <USB_ReadInterrupts>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fce:	f040 80c4 	bne.w	800115a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 f838 	bl	800404c <USB_ReadDevAllInEpInterrupt>
 8000fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000fe2:	e0b6      	b.n	8001152 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80ab 	beq.w	8001146 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 f85e 	bl	80040bc <USB_ReadDevInEPInterrupt>
 8001000:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d05b      	beq.n	80010c4 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	2201      	movs	r2, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	43db      	mvns	r3, r3
 8001026:	69f9      	ldr	r1, [r7, #28]
 8001028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800102c:	4013      	ands	r3, r2
 800102e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	015a      	lsls	r2, r3, #5
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	4413      	add	r3, r2
 8001038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800103c:	461a      	mov	r2, r3
 800103e:	2301      	movs	r3, #1
 8001040:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d11b      	bne.n	8001082 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3348      	adds	r3, #72	; 0x48
 800105a:	6819      	ldr	r1, [r3, #0]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4403      	add	r3, r0
 800106a:	3344      	adds	r3, #68	; 0x44
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4419      	add	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4403      	add	r3, r0
 800107e:	3348      	adds	r3, #72	; 0x48
 8001080:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f005 f884 	bl	8006196 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d116      	bne.n	80010c4 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	2b00      	cmp	r3, #0
 800109a:	d113      	bne.n	80010c4 <HAL_PCD_IRQHandler+0x272>
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	3350      	adds	r3, #80	; 0x50
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d108      	bne.n	80010c4 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80010bc:	461a      	mov	r2, r3
 80010be:	2101      	movs	r1, #1
 80010c0:	f003 f86e 	bl	80041a0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	015a      	lsls	r2, r3, #5
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4413      	add	r3, r2
 80010d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010da:	461a      	mov	r2, r3
 80010dc:	2308      	movs	r3, #8
 80010de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	015a      	lsls	r2, r3, #5
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	4413      	add	r3, r2
 80010f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010f6:	461a      	mov	r2, r3
 80010f8:	2310      	movs	r3, #16
 80010fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	015a      	lsls	r2, r3, #5
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	4413      	add	r3, r2
 800110e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001112:	461a      	mov	r2, r3
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	015a      	lsls	r2, r3, #5
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4413      	add	r3, r2
 800112a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800112e:	461a      	mov	r2, r3
 8001130:	2302      	movs	r3, #2
 8001132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800113e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fc67 	bl	8001a14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	3301      	adds	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	085b      	lsrs	r3, r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f af45 	bne.w	8000fe4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f002 ff47 	bl	8003ff2 <USB_ReadInterrupts>
 8001164:	4603      	mov	r3, r0
 8001166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800116a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800116e:	d122      	bne.n	80011b6 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001196:	2100      	movs	r1, #0
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fe89 	bl	8001eb0 <HAL_PCDEx_LPM_Callback>
 800119e:	e002      	b.n	80011a6 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f005 f86f 	bl	8006284 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 ff19 	bl	8003ff2 <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ca:	d112      	bne.n	80011f2 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d102      	bne.n	80011e2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f005 f82b 	bl	8006238 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011f0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fefb 	bl	8003ff2 <USB_ReadInterrupts>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001206:	f040 80a7 	bne.w	8001358 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2110      	movs	r1, #16
 8001224:	4618      	mov	r0, r3
 8001226:	f002 f833 	bl	8003290 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	e036      	b.n	800129e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001232:	015a      	lsls	r2, r3, #5
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	4413      	add	r3, r2
 8001238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800123c:	461a      	mov	r2, r3
 800123e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001242:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	4413      	add	r3, r2
 800124c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001254:	0151      	lsls	r1, r2, #5
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	440a      	add	r2, r1
 800125a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800125e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001262:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	015a      	lsls	r2, r3, #5
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	4413      	add	r3, r2
 800126c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001270:	461a      	mov	r2, r3
 8001272:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001276:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4413      	add	r3, r2
 8001280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001288:	0151      	lsls	r1, r2, #5
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	440a      	add	r2, r1
 800128e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001292:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001296:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129a:	3301      	adds	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3c3      	bcc.n	8001230 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80012ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d016      	beq.n	80012f2 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012d4:	f043 030b 	orr.w	r3, r3, #11
 80012d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012ea:	f043 030b 	orr.w	r3, r3, #11
 80012ee:	6453      	str	r3, [r2, #68]	; 0x44
 80012f0:	e015      	b.n	800131e <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001304:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001308:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001318:	f043 030b 	orr.w	r3, r3, #11
 800131c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800132c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001330:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001342:	461a      	mov	r2, r3
 8001344:	f002 ff2c 	bl	80041a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fe48 	bl	8003ff2 <USB_ReadInterrupts>
 8001362:	4603      	mov	r3, r0
 8001364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800136c:	d124      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fede 	bl	8004134 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f001 ffe8 	bl	8003352 <USB_GetDevSpeed>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681c      	ldr	r4, [r3, #0]
 800138e:	f001 f9c9 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8001392:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4620      	mov	r0, r4
 800139e:	f001 fd17 	bl	8002dd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f004 ff1f 	bl	80061e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80013b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fe18 	bl	8003ff2 <USB_ReadInterrupts>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b10      	cmp	r3, #16
 80013ca:	d161      	bne.n	8001490 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0210 	bic.w	r2, r2, #16
 80013da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f003 020f 	and.w	r2, r3, #15
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	3304      	adds	r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	0c5b      	lsrs	r3, r3, #17
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	2b02      	cmp	r3, #2
 8001406:	d124      	bne.n	8001452 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d035      	beq.n	8001480 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800141e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	6a38      	ldr	r0, [r7, #32]
 8001428:	f002 fc90 	bl	8003d4c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001438:	441a      	add	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	441a      	add	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	619a      	str	r2, [r3, #24]
 8001450:	e016      	b.n	8001480 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	0c5b      	lsrs	r3, r3, #17
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	2b06      	cmp	r3, #6
 800145c:	d110      	bne.n	8001480 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001464:	2208      	movs	r2, #8
 8001466:	4619      	mov	r1, r3
 8001468:	6a38      	ldr	r0, [r7, #32]
 800146a:	f002 fc6f 	bl	8003d4c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800147a:	441a      	add	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0210 	orr.w	r2, r2, #16
 800148e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fdac 	bl	8003ff2 <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d10a      	bne.n	80014ba <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f004 fe90 	bl	80061ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f002 0208 	and.w	r2, r2, #8
 80014b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fd97 	bl	8003ff2 <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ce:	d10f      	bne.n	80014f0 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f004 fef2 	bl	80062c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80014ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fd7c 	bl	8003ff2 <USB_ReadInterrupts>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001504:	d10f      	bne.n	8001526 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f004 fec5 	bl	80062a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fd61 	bl	8003ff2 <USB_ReadInterrupts>
 8001530:	4603      	mov	r3, r0
 8001532:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153a:	d10a      	bne.n	8001552 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f004 fed3 	bl	80062e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fd4b 	bl	8003ff2 <USB_ReadInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b04      	cmp	r3, #4
 8001564:	d115      	bne.n	8001592 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f004 fec3 	bl	8006304 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e000      	b.n	8001592 <HAL_PCD_IRQHandler+0x740>
      return;
 8001590:	bf00      	nop
    }
  }
}
 8001592:	3734      	adds	r7, #52	; 0x34
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}

08001598 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_PCD_SetAddress+0x1a>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e013      	b.n	80015da <HAL_PCD_SetAddress+0x42>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fcbb 	bl	8003f46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	4608      	mov	r0, r1
 80015ec:	4611      	mov	r1, r2
 80015ee:	461a      	mov	r2, r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	70fb      	strb	r3, [r7, #3]
 80015f4:	460b      	mov	r3, r1
 80015f6:	803b      	strh	r3, [r7, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001604:	2b00      	cmp	r3, #0
 8001606:	da0f      	bge.n	8001628 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 020f 	and.w	r2, r3, #15
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	3338      	adds	r3, #56	; 0x38
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2201      	movs	r2, #1
 8001624:	705a      	strb	r2, [r3, #1]
 8001626:	e00f      	b.n	8001648 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 020f 	and.w	r2, r3, #15
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	3304      	adds	r3, #4
 8001640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	b2da      	uxtb	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001654:	883a      	ldrh	r2, [r7, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	78ba      	ldrb	r2, [r7, #2]
 800165e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001672:	78bb      	ldrb	r3, [r7, #2]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d102      	bne.n	800167e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_PCD_EP_Open+0xaa>
 8001688:	2302      	movs	r3, #2
 800168a:	e00e      	b.n	80016aa <HAL_PCD_EP_Open+0xc8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fe7e 	bl	800339c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80016a8:	7afb      	ldrb	r3, [r7, #11]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da0f      	bge.n	80016e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f003 020f 	and.w	r2, r3, #15
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	3338      	adds	r3, #56	; 0x38
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	705a      	strb	r2, [r3, #1]
 80016e4:	e00f      	b.n	8001706 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	f003 020f 	and.w	r2, r3, #15
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	3304      	adds	r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	b2da      	uxtb	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_PCD_EP_Close+0x6e>
 800171c:	2302      	movs	r3, #2
 800171e:	e00e      	b.n	800173e <HAL_PCD_EP_Close+0x8c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	4618      	mov	r0, r3
 8001730:	f001 febc 	bl	80034ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	460b      	mov	r3, r1
 8001754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001756:	7afb      	ldrb	r3, [r7, #11]
 8001758:	f003 020f 	and.w	r2, r3, #15
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2200      	movs	r2, #0
 8001786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	b2da      	uxtb	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d102      	bne.n	80017a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	6979      	ldr	r1, [r7, #20]
 80017ba:	f002 f93f 	bl	8003a3c <USB_EP0StartXfer>
 80017be:	e008      	b.n	80017d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	6979      	ldr	r1, [r7, #20]
 80017ce:	f001 fef1 	bl	80035b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	f003 020f 	and.w	r2, r3, #15
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	460b      	mov	r3, r1
 800181a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800181c:	7afb      	ldrb	r3, [r7, #11]
 800181e:	f003 020f 	and.w	r2, r3, #15
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	3338      	adds	r3, #56	; 0x38
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	3304      	adds	r3, #4
 8001832:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2201      	movs	r2, #1
 800184a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	b2da      	uxtb	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d102      	bne.n	8001866 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	f002 f8dd 	bl	8003a3c <USB_EP0StartXfer>
 8001882:	e008      	b.n	8001896 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	6979      	ldr	r1, [r7, #20]
 8001892:	f001 fe8f 	bl	80035b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d901      	bls.n	80018be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e050      	b.n	8001960 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da0f      	bge.n	80018e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	f003 020f 	and.w	r2, r3, #15
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	3338      	adds	r3, #56	; 0x38
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	3304      	adds	r3, #4
 80018dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	705a      	strb	r2, [r3, #1]
 80018e4:	e00d      	b.n	8001902 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	3304      	adds	r3, #4
 80018fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	b2da      	uxtb	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_PCD_EP_SetStall+0x82>
 800191e:	2302      	movs	r3, #2
 8001920:	e01e      	b.n	8001960 <HAL_PCD_EP_SetStall+0xc0>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fa34 	bl	8003d9e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10a      	bne.n	8001956 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	b2d9      	uxtb	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001950:	461a      	mov	r2, r3
 8001952:	f002 fc25 	bl	80041a0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	f003 020f 	and.w	r2, r3, #15
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d901      	bls.n	8001986 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e042      	b.n	8001a0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da0f      	bge.n	80019ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 020f 	and.w	r2, r3, #15
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	3338      	adds	r3, #56	; 0x38
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	705a      	strb	r2, [r3, #1]
 80019ac:	e00f      	b.n	80019ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 020f 	and.w	r2, r3, #15
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_PCD_EP_ClrStall+0x86>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e00e      	b.n	8001a0c <HAL_PCD_EP_ClrStall+0xa4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68f9      	ldr	r1, [r7, #12]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fa3c 	bl	8003e7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	3338      	adds	r3, #56	; 0x38
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d901      	bls.n	8001a4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e06c      	b.n	8001b26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d902      	bls.n	8001a68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a70:	e02b      	b.n	8001aca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d902      	bls.n	8001a8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3303      	adds	r3, #3
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	68d9      	ldr	r1, [r3, #12]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6978      	ldr	r0, [r7, #20]
 8001aae:	f002 f918 	bl	8003ce2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	441a      	add	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d809      	bhi.n	8001af4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d203      	bcs.n	8001af4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1be      	bne.n	8001a72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d811      	bhi.n	8001b24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	2201      	movs	r2, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	6939      	ldr	r1, [r7, #16]
 8001b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b20:	4013      	ands	r3, r2
 8001b22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	333c      	adds	r3, #60	; 0x3c
 8001b48:	3304      	adds	r3, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 80b3 	bne.w	8001cce <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d028      	beq.n	8001bc4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4a70      	ldr	r2, [pc, #448]	; (8001d38 <PCD_EP_OutXfrComplete_int+0x208>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d90e      	bls.n	8001b98 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b96:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f004 facf 	bl	800613c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2101      	movs	r1, #1
 8001bac:	f002 faf8 	bl	80041a0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	6093      	str	r3, [r2, #8]
 8001bc2:	e0b3      	b.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2320      	movs	r3, #32
 8001bde:	6093      	str	r3, [r2, #8]
 8001be0:	e0a4      	b.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 809f 	bne.w	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <PCD_EP_OutXfrComplete_int+0x208>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d90f      	bls.n	8001c16 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00a      	beq.n	8001c16 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c12:	6093      	str	r3, [r2, #8]
 8001c14:	e08a      	b.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c28:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	0159      	lsls	r1, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	440b      	add	r3, r1
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001c3c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4403      	add	r3, r0
 8001c4c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c50:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4403      	add	r3, r0
 8001c74:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4419      	add	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4403      	add	r3, r0
 8001c8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c8e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f004 fa62 	bl	8006160 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d144      	bne.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d138      	bne.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	f002 fa6a 	bl	80041a0 <USB_EP0_OutStart>
 8001ccc:	e02e      	b.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <PCD_EP_OutXfrComplete_int+0x20c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d124      	bne.n	8001d20 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cec:	461a      	mov	r2, r3
 8001cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf2:	6093      	str	r3, [r2, #8]
 8001cf4:	e01a      	b.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2320      	movs	r3, #32
 8001d10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f004 fa21 	bl	8006160 <HAL_PCD_DataOutStageCallback>
 8001d1e:	e005      	b.n	8001d2c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f004 fa1a 	bl	8006160 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	4f54300a 	.word	0x4f54300a
 8001d3c:	4f54310a 	.word	0x4f54310a

08001d40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	333c      	adds	r3, #60	; 0x3c
 8001d58:	3304      	adds	r3, #4
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d113      	bne.n	8001d9e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d922      	bls.n	8001dc4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01d      	beq.n	8001dc4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d94:	461a      	mov	r2, r3
 8001d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d9a:	6093      	str	r3, [r2, #8]
 8001d9c:	e012      	b.n	8001dc4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <PCD_EP_OutSetupPacket_int+0xbc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10e      	bne.n	8001dc4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f004 f9b9 	bl	800613c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d90c      	bls.n	8001dec <PCD_EP_OutSetupPacket_int+0xac>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001de4:	461a      	mov	r2, r3
 8001de6:	2101      	movs	r1, #1
 8001de8:	f002 f9da 	bl	80041a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	4f54300a 	.word	0x4f54300a
 8001dfc:	4f54310a 	.word	0x4f54310a

08001e00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d107      	bne.n	8001e2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e1e:	883b      	ldrh	r3, [r7, #0]
 8001e20:	0419      	lsls	r1, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e2c:	e028      	b.n	8001e80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	0c1b      	lsrs	r3, r3, #16
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e00d      	b.n	8001e5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	3340      	adds	r3, #64	; 0x40
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0c1b      	lsrs	r3, r3, #16
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4413      	add	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d3ec      	bcc.n	8001e42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e68:	883b      	ldrh	r3, [r7, #0]
 8001e6a:	0418      	lsls	r0, r3, #16
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	4302      	orrs	r2, r0
 8001e78:	3340      	adds	r3, #64	; 0x40
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e25b      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d075      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee6:	4ba3      	ldr	r3, [pc, #652]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d00c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef2:	4ba0      	ldr	r3, [pc, #640]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d112      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efe:	4b9d      	ldr	r3, [pc, #628]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0a:	d10b      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	4b99      	ldr	r3, [pc, #612]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d05b      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x108>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d157      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e236      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCC_OscConfig+0x74>
 8001f2e:	4b91      	ldr	r3, [pc, #580]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a90      	ldr	r2, [pc, #576]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e01d      	b.n	8001f78 <HAL_RCC_OscConfig+0xb0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x98>
 8001f46:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a8a      	ldr	r2, [pc, #552]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a87      	ldr	r2, [pc, #540]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0xb0>
 8001f60:	4b84      	ldr	r3, [pc, #528]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a83      	ldr	r2, [pc, #524]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b81      	ldr	r3, [pc, #516]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a80      	ldr	r2, [pc, #512]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fb44 	bl	800060c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7fe fb40 	bl	800060c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1fb      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0xc0>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fb30 	bl	800060c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7fe fb2c 	bl	800060c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1e7      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xe8>
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d063      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fea:	4b62      	ldr	r3, [pc, #392]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d11c      	bne.n	8002030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d116      	bne.n	8002030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	4b5c      	ldr	r3, [pc, #368]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x152>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e1bb      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b56      	ldr	r3, [pc, #344]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4952      	ldr	r1, [pc, #328]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	e03a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002038:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_RCC_OscConfig+0x2b0>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7fe fae5 	bl	800060c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002046:	f7fe fae1 	bl	800060c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e19c      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	4b46      	ldr	r3, [pc, #280]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4940      	ldr	r1, [pc, #256]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0x2b0>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fac4 	bl	800060c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002088:	f7fe fac0 	bl	800060c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e17b      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d030      	beq.n	8002114 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d016      	beq.n	80020e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCC_OscConfig+0x2b4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7fe faa4 	bl	800060c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c8:	f7fe faa0 	bl	800060c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e15b      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x200>
 80020e6:	e015      	b.n	8002114 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_OscConfig+0x2b4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ee:	f7fe fa8d 	bl	800060c <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f6:	f7fe fa89 	bl	800060c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e144      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a0 	beq.w	8002262 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x2b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d121      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_RCC_OscConfig+0x2b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_RCC_OscConfig+0x2b8>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7fe fa4f 	bl	800060c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e011      	b.n	8002196 <HAL_RCC_OscConfig+0x2ce>
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	42470000 	.word	0x42470000
 800217c:	42470e80 	.word	0x42470e80
 8002180:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe fa42 	bl	800060c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0fd      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x4d4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
 80021aa:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a7c      	ldr	r2, [pc, #496]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	e01c      	b.n	80021f2 <HAL_RCC_OscConfig+0x32a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d10c      	bne.n	80021da <HAL_RCC_OscConfig+0x312>
 80021c0:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a76      	ldr	r2, [pc, #472]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a73      	ldr	r2, [pc, #460]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0x32a>
 80021da:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a70      	ldr	r2, [pc, #448]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
 80021e6:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a6d      	ldr	r2, [pc, #436]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d015      	beq.n	8002226 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe fa07 	bl	800060c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fa03 	bl	800060c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0bc      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ee      	beq.n	8002202 <HAL_RCC_OscConfig+0x33a>
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe f9f1 	bl	800060c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe f9ed 	bl	800060c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0a6      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ee      	bne.n	800222e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002256:	4b52      	ldr	r3, [pc, #328]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a51      	ldr	r2, [pc, #324]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 800225c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8092 	beq.w	8002390 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226c:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d05c      	beq.n	8002332 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d141      	bne.n	8002304 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b48      	ldr	r3, [pc, #288]	; (80023a4 <HAL_RCC_OscConfig+0x4dc>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe f9c1 	bl	800060c <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe f9bd 	bl	800060c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e078      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	019b      	lsls	r3, r3, #6
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	4933      	ldr	r1, [pc, #204]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0x4dc>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe f996 	bl	800060c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe f992 	bl	800060c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04d      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x41c>
 8002302:	e045      	b.n	8002390 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x4dc>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe f97f 	bl	800060c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe f97b 	bl	800060c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e036      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x44a>
 8002330:	e02e      	b.n	8002390 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e029      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_RCC_OscConfig+0x4d8>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	429a      	cmp	r2, r3
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d115      	bne.n	800238c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800236c:	4293      	cmp	r3, r2
 800236e:	d10d      	bne.n	800238c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d106      	bne.n	800238c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470060 	.word	0x42470060

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0cc      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d90c      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d044      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e067      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4934      	ldr	r1, [pc, #208]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7fe f8b8 	bl	800060c <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe f8b4 	bl	800060c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d20c      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4601      	mov	r1, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	fa21 f303 	lsr.w	r3, r1, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fbe0 	bl	8005d14 <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023c00 	.word	0x40023c00
 8002564:	40023800 	.word	0x40023800
 8002568:	0800720c 	.word	0x0800720c
 800256c:	20000118 	.word	0x20000118
 8002570:	20000000 	.word	0x20000000

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	2300      	movs	r3, #0
 8002584:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258a:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d007      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x32>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d008      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x38>
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 80b4 	bne.w	8002708 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b5e      	ldr	r3, [pc, #376]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025a2:	60bb      	str	r3, [r7, #8]
       break;
 80025a4:	e0b3      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025a6:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025a8:	60bb      	str	r3, [r7, #8]
      break;
 80025aa:	e0b0      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ac:	4b5a      	ldr	r3, [pc, #360]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b6:	4b58      	ldr	r3, [pc, #352]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d04a      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c2:	4b55      	ldr	r3, [pc, #340]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	f04f 0400 	mov.w	r4, #0
 80025cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	ea03 0501 	and.w	r5, r3, r1
 80025d8:	ea04 0602 	and.w	r6, r4, r2
 80025dc:	4629      	mov	r1, r5
 80025de:	4632      	mov	r2, r6
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	f04f 0400 	mov.w	r4, #0
 80025e8:	0154      	lsls	r4, r2, #5
 80025ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ee:	014b      	lsls	r3, r1, #5
 80025f0:	4619      	mov	r1, r3
 80025f2:	4622      	mov	r2, r4
 80025f4:	1b49      	subs	r1, r1, r5
 80025f6:	eb62 0206 	sbc.w	r2, r2, r6
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	f04f 0400 	mov.w	r4, #0
 8002602:	0194      	lsls	r4, r2, #6
 8002604:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002608:	018b      	lsls	r3, r1, #6
 800260a:	1a5b      	subs	r3, r3, r1
 800260c:	eb64 0402 	sbc.w	r4, r4, r2
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	00e2      	lsls	r2, r4, #3
 800261a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800261e:	00d9      	lsls	r1, r3, #3
 8002620:	460b      	mov	r3, r1
 8002622:	4614      	mov	r4, r2
 8002624:	195b      	adds	r3, r3, r5
 8002626:	eb44 0406 	adc.w	r4, r4, r6
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	0262      	lsls	r2, r4, #9
 8002634:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002638:	0259      	lsls	r1, r3, #9
 800263a:	460b      	mov	r3, r1
 800263c:	4614      	mov	r4, r2
 800263e:	4618      	mov	r0, r3
 8002640:	4621      	mov	r1, r4
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f04f 0400 	mov.w	r4, #0
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	f7fd fe28 	bl	80002a0 <__aeabi_uldivmod>
 8002650:	4603      	mov	r3, r0
 8002652:	460c      	mov	r4, r1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e049      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	f04f 0400 	mov.w	r4, #0
 8002662:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	ea03 0501 	and.w	r5, r3, r1
 800266e:	ea04 0602 	and.w	r6, r4, r2
 8002672:	4629      	mov	r1, r5
 8002674:	4632      	mov	r2, r6
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f04f 0400 	mov.w	r4, #0
 800267e:	0154      	lsls	r4, r2, #5
 8002680:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002684:	014b      	lsls	r3, r1, #5
 8002686:	4619      	mov	r1, r3
 8002688:	4622      	mov	r2, r4
 800268a:	1b49      	subs	r1, r1, r5
 800268c:	eb62 0206 	sbc.w	r2, r2, r6
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	0194      	lsls	r4, r2, #6
 800269a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	1a5b      	subs	r3, r3, r1
 80026a2:	eb64 0402 	sbc.w	r4, r4, r2
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	00e2      	lsls	r2, r4, #3
 80026b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026b4:	00d9      	lsls	r1, r3, #3
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	195b      	adds	r3, r3, r5
 80026bc:	eb44 0406 	adc.w	r4, r4, r6
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	02a2      	lsls	r2, r4, #10
 80026ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026ce:	0299      	lsls	r1, r3, #10
 80026d0:	460b      	mov	r3, r1
 80026d2:	4614      	mov	r4, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	4621      	mov	r1, r4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	461a      	mov	r2, r3
 80026e0:	4623      	mov	r3, r4
 80026e2:	f7fd fddd 	bl	80002a0 <__aeabi_uldivmod>
 80026e6:	4603      	mov	r3, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	60bb      	str	r3, [r7, #8]
      break;
 8002706:	e002      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800270a:	60bb      	str	r3, [r7, #8]
      break;
 800270c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270e:	68bb      	ldr	r3, [r7, #8]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	00f42400 	.word	0x00f42400
 8002720:	007a1200 	.word	0x007a1200

08002724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000118 	.word	0x20000118

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4601      	mov	r1, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0b5b      	lsrs	r3, r3, #13
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4a03      	ldr	r2, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	0800721c 	.word	0x0800721c

08002764 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	220f      	movs	r2, #15
 8002772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <HAL_RCC_GetClockConfig+0x60>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 020f 	and.w	r2, r3, #15
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e056      	b.n	8002888 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f003 fa1d 	bl	8005c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002810:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	ea42 0103 	orr.w	r1, r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	f003 0104 	and.w	r1, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002876:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e01d      	b.n	80028de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f815 	bl	80028e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f968 	bl	8002ba4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d007      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d122      	bne.n	800299e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d11b      	bne.n	800299e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0202 	mvn.w	r2, #2
 800296e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8ee 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 800298a:	e005      	b.n	8002998 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8e0 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8f1 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d122      	bne.n	80029f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d11b      	bne.n	80029f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0204 	mvn.w	r2, #4
 80029c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f8c4 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 80029de:	e005      	b.n	80029ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8b6 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8c7 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d122      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d11b      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0208 	mvn.w	r2, #8
 8002a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f89a 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002a32:	e005      	b.n	8002a40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f88c 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f89d 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d122      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d11b      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0210 	mvn.w	r2, #16
 8002a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2208      	movs	r2, #8
 8002a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f870 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002a86:	e005      	b.n	8002a94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f862 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f873 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0201 	mvn.w	r2, #1
 8002abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f003 f867 	bl	8005b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d10e      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f903 	bl	8002cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d10e      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d107      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f838 	bl	8002b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d10e      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0220 	mvn.w	r2, #32
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8cd 	bl	8002ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc2:	d00f      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a3d      	ldr	r2, [pc, #244]	; (8002cbc <TIM_Base_SetConfig+0x118>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a3c      	ldr	r2, [pc, #240]	; (8002cc0 <TIM_Base_SetConfig+0x11c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d007      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <TIM_Base_SetConfig+0x120>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d108      	bne.n	8002bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d027      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <TIM_Base_SetConfig+0x118>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d023      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <TIM_Base_SetConfig+0x11c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01f      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <TIM_Base_SetConfig+0x120>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01b      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d017      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <TIM_Base_SetConfig+0x128>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <TIM_Base_SetConfig+0x12c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <TIM_Base_SetConfig+0x130>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <TIM_Base_SetConfig+0x134>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <TIM_Base_SetConfig+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <TIM_Base_SetConfig+0x13c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_Base_SetConfig+0xf8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d103      	bne.n	8002ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	615a      	str	r2, [r3, #20]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	40000c00 	.word	0x40000c00
 8002cc8:	40010400 	.word	0x40010400
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	40014800 	.word	0x40014800
 8002cd8:	40001800 	.word	0x40001800
 8002cdc:	40001c00 	.word	0x40001c00
 8002ce0:	40002000 	.word	0x40002000

08002ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	f107 001c 	add.w	r0, r7, #28
 8002d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d122      	bne.n	8002d6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f001 fa7c 	bl	800425c <USB_CoreReset>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e01a      	b.n	8002da0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f001 fa70 	bl	800425c <USB_CoreReset>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
 8002d92:	e005      	b.n	8002da0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10b      	bne.n	8002dbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f043 0206 	orr.w	r2, r3, #6
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dca:	b004      	add	sp, #16
 8002dcc:	4770      	bx	lr
	...

08002dd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d165      	bne.n	8002eb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a41      	ldr	r2, [pc, #260]	; (8002eec <USB_SetTurnaroundTime+0x11c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d906      	bls.n	8002dfa <USB_SetTurnaroundTime+0x2a>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a40      	ldr	r2, [pc, #256]	; (8002ef0 <USB_SetTurnaroundTime+0x120>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d802      	bhi.n	8002dfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002df4:	230f      	movs	r3, #15
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e062      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a3c      	ldr	r2, [pc, #240]	; (8002ef0 <USB_SetTurnaroundTime+0x120>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d906      	bls.n	8002e10 <USB_SetTurnaroundTime+0x40>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <USB_SetTurnaroundTime+0x124>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d802      	bhi.n	8002e10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e0a:	230e      	movs	r3, #14
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e057      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <USB_SetTurnaroundTime+0x124>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d906      	bls.n	8002e26 <USB_SetTurnaroundTime+0x56>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a37      	ldr	r2, [pc, #220]	; (8002ef8 <USB_SetTurnaroundTime+0x128>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d802      	bhi.n	8002e26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e20:	230d      	movs	r3, #13
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e04c      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <USB_SetTurnaroundTime+0x128>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d906      	bls.n	8002e3c <USB_SetTurnaroundTime+0x6c>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4a32      	ldr	r2, [pc, #200]	; (8002efc <USB_SetTurnaroundTime+0x12c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d802      	bhi.n	8002e3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e36:	230c      	movs	r3, #12
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e041      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a2f      	ldr	r2, [pc, #188]	; (8002efc <USB_SetTurnaroundTime+0x12c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d906      	bls.n	8002e52 <USB_SetTurnaroundTime+0x82>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a2e      	ldr	r2, [pc, #184]	; (8002f00 <USB_SetTurnaroundTime+0x130>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d802      	bhi.n	8002e52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e4c:	230b      	movs	r3, #11
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e036      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <USB_SetTurnaroundTime+0x130>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d906      	bls.n	8002e68 <USB_SetTurnaroundTime+0x98>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4a29      	ldr	r2, [pc, #164]	; (8002f04 <USB_SetTurnaroundTime+0x134>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e62:	230a      	movs	r3, #10
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e02b      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <USB_SetTurnaroundTime+0x134>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d906      	bls.n	8002e7e <USB_SetTurnaroundTime+0xae>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <USB_SetTurnaroundTime+0x138>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d802      	bhi.n	8002e7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e78:	2309      	movs	r3, #9
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e020      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <USB_SetTurnaroundTime+0x138>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d906      	bls.n	8002e94 <USB_SetTurnaroundTime+0xc4>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <USB_SetTurnaroundTime+0x13c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d802      	bhi.n	8002e94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e8e:	2308      	movs	r3, #8
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e015      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <USB_SetTurnaroundTime+0x13c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d906      	bls.n	8002eaa <USB_SetTurnaroundTime+0xda>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <USB_SetTurnaroundTime+0x140>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d802      	bhi.n	8002eaa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e00a      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eaa:	2306      	movs	r3, #6
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e007      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002eb6:	2309      	movs	r3, #9
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e001      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ebc:	2309      	movs	r3, #9
 8002ebe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	029b      	lsls	r3, r3, #10
 8002ed4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	00d8acbf 	.word	0x00d8acbf
 8002ef0:	00e4e1bf 	.word	0x00e4e1bf
 8002ef4:	00f423ff 	.word	0x00f423ff
 8002ef8:	0106737f 	.word	0x0106737f
 8002efc:	011a499f 	.word	0x011a499f
 8002f00:	01312cff 	.word	0x01312cff
 8002f04:	014ca43f 	.word	0x014ca43f
 8002f08:	016e35ff 	.word	0x016e35ff
 8002f0c:	01a6ab1f 	.word	0x01a6ab1f
 8002f10:	01e847ff 	.word	0x01e847ff

08002f14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0201 	bic.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d106      	bne.n	8002f84 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	e00b      	b.n	8002f9c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	e001      	b.n	8002f9c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e003      	b.n	8002fa4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002f9c:	2032      	movs	r0, #50	; 0x32
 8002f9e:	f7fd fb41 	bl	8000624 <HAL_Delay>

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fac:	b084      	sub	sp, #16
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e009      	b.n	8002fe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	3340      	adds	r3, #64	; 0x40
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b0e      	cmp	r3, #14
 8002fe4:	d9f2      	bls.n	8002fcc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d112      	bne.n	8003012 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
 8003010:	e00b      	b.n	800302a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303c:	4619      	mov	r1, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003044:	461a      	mov	r2, r3
 8003046:	680b      	ldr	r3, [r1, #0]
 8003048:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f961 	bl	8003320 <USB_SetDevSpeed>
 800305e:	e008      	b.n	8003072 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003060:	2101      	movs	r1, #1
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f95c 	bl	8003320 <USB_SetDevSpeed>
 8003068:	e003      	b.n	8003072 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800306a:	2103      	movs	r1, #3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f957 	bl	8003320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003072:	2110      	movs	r1, #16
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f90b 	bl	8003290 <USB_FlushTxFifo>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f929 	bl	80032dc <USB_FlushRxFifo>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a6:	461a      	mov	r2, r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	e043      	b.n	8003146 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d4:	d118      	bne.n	8003108 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e8:	461a      	mov	r2, r3
 80030ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e013      	b.n	800311a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e008      	b.n	800311a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003114:	461a      	mov	r2, r3
 8003116:	2300      	movs	r3, #0
 8003118:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003126:	461a      	mov	r2, r3
 8003128:	2300      	movs	r3, #0
 800312a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800313e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	3301      	adds	r3, #1
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	429a      	cmp	r2, r3
 800314c:	d3b7      	bcc.n	80030be <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e043      	b.n	80031dc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316a:	d118      	bne.n	800319e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e013      	b.n	80031b0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e008      	b.n	80031b0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	2300      	movs	r3, #0
 80031ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031bc:	461a      	mov	r2, r3
 80031be:	2300      	movs	r3, #0
 80031c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3301      	adds	r3, #1
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d3b7      	bcc.n	8003154 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d111      	bne.n	8003222 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003204:	461a      	mov	r2, r3
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <USB_DevInit+0x2dc>)
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	f043 0303 	orr.w	r3, r3, #3
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800322e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <USB_DevInit+0x2e0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f043 0208 	orr.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003282:	b004      	add	sp, #16
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	00800100 	.word	0x00800100
 800328c:	803c3800 	.word	0x803c3800

08003290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <USB_FlushTxFifo+0x48>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e006      	b.n	80032ca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d0f0      	beq.n	80032aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	00030d40 	.word	0x00030d40

080032dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2210      	movs	r2, #16
 80032ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <USB_FlushRxFifo+0x40>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e006      	b.n	800330e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b10      	cmp	r3, #16
 800330a:	d0f0      	beq.n	80032ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	00030d40 	.word	0x00030d40

08003320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003352:	b480      	push	{r7}
 8003354:	b087      	sub	sp, #28
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0306 	and.w	r3, r3, #6
 800336a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]
 8003376:	e00a      	b.n	800338e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d002      	beq.n	8003384 <USB_GetDevSpeed+0x32>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d102      	bne.n	800338a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003384:	2302      	movs	r3, #2
 8003386:	75fb      	strb	r3, [r7, #23]
 8003388:	e001      	b.n	800338e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800338a:	230f      	movs	r3, #15
 800338c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800338e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003390:	4618      	mov	r0, r3
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d13a      	bne.n	800342e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f303 	lsl.w	r3, r1, r3
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d155      	bne.n	800349c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	78db      	ldrb	r3, [r3, #3]
 800340a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800340c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	059b      	lsls	r3, r3, #22
 8003412:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003414:	4313      	orrs	r3, r2
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	0151      	lsls	r1, r2, #5
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	440a      	add	r2, r1
 800341e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e036      	b.n	800349c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800344c:	4313      	orrs	r3, r2
 800344e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11a      	bne.n	800349c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003482:	430b      	orrs	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	0151      	lsls	r1, r2, #5
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	440a      	add	r2, r1
 800348e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d135      	bne.n	8003534 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e8:	4013      	ands	r3, r2
 80034ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800350c:	4013      	ands	r3, r2
 800350e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0159      	lsls	r1, r3, #5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	440b      	add	r3, r1
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	4619      	mov	r1, r3
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <USB_DeactivateEndpoint+0x100>)
 800352e:	4013      	ands	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
 8003532:	e034      	b.n	800359e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	2101      	movs	r1, #1
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	43db      	mvns	r3, r3
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003554:	4013      	ands	r3, r2
 8003556:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	43db      	mvns	r3, r3
 8003572:	68f9      	ldr	r1, [r7, #12]
 8003574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003578:	4013      	ands	r3, r2
 800357a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	0159      	lsls	r1, r3, #5
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	440b      	add	r3, r1
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	4619      	mov	r1, r3
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <USB_DeactivateEndpoint+0x104>)
 800359a:	4013      	ands	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	ec337800 	.word	0xec337800
 80035b0:	eff37800 	.word	0xeff37800

080035b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 815c 	bne.w	800388e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d132      	bne.n	8003644 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	440a      	add	r2, r1
 8003618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800361c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	0151      	lsls	r1, r2, #5
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	440a      	add	r2, r1
 8003638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363c:	0cdb      	lsrs	r3, r3, #19
 800363e:	04db      	lsls	r3, r3, #19
 8003640:	6113      	str	r3, [r2, #16]
 8003642:	e074      	b.n	800372e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365e:	0cdb      	lsrs	r3, r3, #19
 8003660:	04db      	lsls	r3, r3, #19
 8003662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	0151      	lsls	r1, r2, #5
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	440a      	add	r2, r1
 800367a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003682:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6959      	ldr	r1, [r3, #20]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	440b      	add	r3, r1
 80036a0:	1e59      	subs	r1, r3, #1
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036aa:	04d9      	lsls	r1, r3, #19
 80036ac:	4b9d      	ldr	r3, [pc, #628]	; (8003924 <USB_EPStartXfer+0x370>)
 80036ae:	400b      	ands	r3, r1
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	0148      	lsls	r0, r1, #5
 80036b4:	69f9      	ldr	r1, [r7, #28]
 80036b6:	4401      	add	r1, r0
 80036b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036bc:	4313      	orrs	r3, r2
 80036be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	69b9      	ldr	r1, [r7, #24]
 80036d8:	0148      	lsls	r0, r1, #5
 80036da:	69f9      	ldr	r1, [r7, #28]
 80036dc:	4401      	add	r1, r0
 80036de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11f      	bne.n	800372e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	440a      	add	r2, r1
 8003704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003708:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800370c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	0151      	lsls	r1, r2, #5
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	440a      	add	r2, r1
 8003724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800372c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d14b      	bne.n	80037cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	78db      	ldrb	r3, [r3, #3]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d128      	bne.n	80037aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d110      	bne.n	800378a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	0151      	lsls	r1, r2, #5
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	440a      	add	r2, r1
 800377e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e00f      	b.n	80037aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	0151      	lsls	r1, r2, #5
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	440a      	add	r2, r1
 80037a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e12f      	b.n	8003a2c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	78db      	ldrb	r3, [r3, #3]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d015      	beq.n	8003820 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8117 	beq.w	8003a2c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	69f9      	ldr	r1, [r7, #28]
 8003816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800381a:	4313      	orrs	r3, r2
 800381c:	634b      	str	r3, [r1, #52]	; 0x34
 800381e:	e105      	b.n	8003a2c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d110      	bne.n	8003852 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e00f      	b.n	8003872 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003870:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	68d9      	ldr	r1, [r3, #12]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	b298      	uxth	r0, r3
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	4603      	mov	r3, r0
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa2b 	bl	8003ce2 <USB_WritePacket>
 800388c:	e0ce      	b.n	8003a2c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038a8:	0cdb      	lsrs	r3, r3, #19
 80038aa:	04db      	lsls	r3, r3, #19
 80038ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d126      	bne.n	8003928 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	0148      	lsls	r0, r1, #5
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	4401      	add	r1, r0
 80038f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038fc:	4313      	orrs	r3, r2
 80038fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800391e:	6113      	str	r3, [r2, #16]
 8003920:	e036      	b.n	8003990 <USB_EPStartXfer+0x3dc>
 8003922:	bf00      	nop
 8003924:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4413      	add	r3, r2
 8003932:	1e5a      	subs	r2, r3, #1
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	8afb      	ldrh	r3, [r7, #22]
 800394e:	04d9      	lsls	r1, r3, #19
 8003950:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <USB_EPStartXfer+0x484>)
 8003952:	400b      	ands	r3, r1
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	0148      	lsls	r0, r1, #5
 8003958:	69f9      	ldr	r1, [r7, #28]
 800395a:	4401      	add	r1, r0
 800395c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003960:	4313      	orrs	r3, r2
 8003962:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	8af9      	ldrh	r1, [r7, #22]
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003980:	69b9      	ldr	r1, [r7, #24]
 8003982:	0148      	lsls	r0, r1, #5
 8003984:	69f9      	ldr	r1, [r7, #28]
 8003986:	4401      	add	r1, r0
 8003988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800398c:	4313      	orrs	r3, r2
 800398e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10d      	bne.n	80039b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	68d9      	ldr	r1, [r3, #12]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	460a      	mov	r2, r1
 80039b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	78db      	ldrb	r3, [r3, #3]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d128      	bne.n	8003a0c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d110      	bne.n	80039ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00f      	b.n	8003a0c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	1ff80000 	.word	0x1ff80000

08003a3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	f040 80cd 	bne.w	8003bf8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d132      	bne.n	8003acc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	0151      	lsls	r1, r2, #5
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	440a      	add	r2, r1
 8003a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	0151      	lsls	r1, r2, #5
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	440a      	add	r2, r1
 8003aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac4:	0cdb      	lsrs	r3, r3, #19
 8003ac6:	04db      	lsls	r3, r3, #19
 8003ac8:	6113      	str	r3, [r2, #16]
 8003aca:	e04e      	b.n	8003b6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	0151      	lsls	r1, r2, #5
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	440a      	add	r2, r1
 8003ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae6:	0cdb      	lsrs	r3, r3, #19
 8003ae8:	04db      	lsls	r3, r3, #19
 8003aea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d903      	bls.n	8003b24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5a:	6939      	ldr	r1, [r7, #16]
 8003b5c:	0148      	lsls	r0, r1, #5
 8003b5e:	6979      	ldr	r1, [r7, #20]
 8003b60:	4401      	add	r1, r0
 8003b62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d11e      	bne.n	8003bae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	0151      	lsls	r1, r2, #5
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e092      	b.n	8003cd4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	0151      	lsls	r1, r2, #5
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	440a      	add	r2, r1
 8003bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d07e      	beq.n	8003cd4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	2101      	movs	r1, #1
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	634b      	str	r3, [r1, #52]	; 0x34
 8003bf6:	e06d      	b.n	8003cd4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c12:	0cdb      	lsrs	r3, r3, #19
 8003c14:	04db      	lsls	r3, r3, #19
 8003c16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c3a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	0148      	lsls	r0, r1, #5
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	4401      	add	r1, r0
 8003c8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10d      	bne.n	8003cb4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	68d9      	ldr	r1, [r3, #12]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b089      	sub	sp, #36	; 0x24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	4611      	mov	r1, r2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	71fb      	strb	r3, [r7, #7]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11a      	bne.n	8003d3e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d08:	88bb      	ldrh	r3, [r7, #4]
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e00f      	b.n	8003d36 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	031a      	lsls	r2, r3, #12
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d22:	461a      	mov	r2, r3
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	3301      	adds	r3, #1
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d3eb      	bcc.n	8003d16 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3724      	adds	r7, #36	; 0x24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	3303      	adds	r3, #3
 8003d66:	089b      	lsrs	r3, r3, #2
 8003d68:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e00b      	b.n	8003d88 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d3ef      	bcc.n	8003d70 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003d90:	69fb      	ldr	r3, [r7, #28]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3724      	adds	r7, #36	; 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	785b      	ldrb	r3, [r3, #1]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d12c      	bne.n	8003e14 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db12      	blt.n	8003df2 <USB_EPSetStall+0x54>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00f      	beq.n	8003df2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	0151      	lsls	r1, r2, #5
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	440a      	add	r2, r1
 8003de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003df0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	0151      	lsls	r1, r2, #5
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	440a      	add	r2, r1
 8003e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e02b      	b.n	8003e6c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db12      	blt.n	8003e4c <USB_EPSetStall+0xae>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00f      	beq.n	8003e4c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e4a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d128      	bne.n	8003ee8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	78db      	ldrb	r3, [r3, #3]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d003      	beq.n	8003ec6 <USB_EPClearStall+0x4c>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	78db      	ldrb	r3, [r3, #3]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d138      	bne.n	8003f38 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e027      	b.n	8003f38 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	78db      	ldrb	r3, [r3, #3]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d003      	beq.n	8003f18 <USB_EPClearStall+0x9e>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	78db      	ldrb	r3, [r3, #3]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d10f      	bne.n	8003f38 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	0151      	lsls	r1, r2, #5
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f36:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f68:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fac:	f023 0302 	bic.w	r3, r3, #2
 8003fb0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003fb2:	2003      	movs	r0, #3
 8003fb4:	f7fc fb36 	bl	8000624 <HAL_Delay>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003fe2:	2003      	movs	r0, #3
 8003fe4:	f7fc fb1e 	bl	8000624 <HAL_Delay>

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0c1b      	lsrs	r3, r3, #16
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	b29b      	uxth	r3, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040ae:	68bb      	ldr	r3, [r7, #8]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	01db      	lsls	r3, r3, #7
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800410a:	68bb      	ldr	r3, [r7, #8]
}
 800410c:	4618      	mov	r0, r3
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0301 	and.w	r3, r3, #1
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004152:	f023 0307 	bic.w	r3, r3, #7
 8004156:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0306 	and.w	r3, r3, #6
 8004164:	2b04      	cmp	r3, #4
 8004166:	d109      	bne.n	800417c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004176:	f043 0303 	orr.w	r3, r3, #3
 800417a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	460b      	mov	r3, r1
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	333c      	adds	r3, #60	; 0x3c
 80041b6:	3304      	adds	r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4a26      	ldr	r2, [pc, #152]	; (8004258 <USB_EP0_OutStart+0xb8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d90a      	bls.n	80041da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041d4:	d101      	bne.n	80041da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e037      	b.n	800424a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004208:	f043 0318 	orr.w	r3, r3, #24
 800420c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800421c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004220:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004222:	7afb      	ldrb	r3, [r7, #11]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d10f      	bne.n	8004248 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004242:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	4f54300a 	.word	0x4f54300a

0800425c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <USB_CoreReset+0x64>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e01b      	b.n	80042b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	daf2      	bge.n	8004268 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3301      	adds	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <USB_CoreReset+0x64>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e006      	b.n	80042b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d0f0      	beq.n	8004292 <USB_CoreReset+0x36>

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	00030d40 	.word	0x00030d40

080042c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	7c1b      	ldrb	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d115      	bne.n	8004308 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80042dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e0:	2202      	movs	r2, #2
 80042e2:	2181      	movs	r1, #129	; 0x81
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f002 f888 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f4:	2202      	movs	r2, #2
 80042f6:	2101      	movs	r1, #1
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f002 f87e 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004306:	e012      	b.n	800432e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004308:	2340      	movs	r3, #64	; 0x40
 800430a:	2202      	movs	r2, #2
 800430c:	2181      	movs	r1, #129	; 0x81
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f002 f873 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800431a:	2340      	movs	r3, #64	; 0x40
 800431c:	2202      	movs	r2, #2
 800431e:	2101      	movs	r1, #1
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f002 f86a 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800432e:	2308      	movs	r3, #8
 8004330:	2203      	movs	r2, #3
 8004332:	2182      	movs	r1, #130	; 0x82
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f002 f860 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004340:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004344:	f002 fb0e 	bl	8006964 <malloc>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e026      	b.n	80043b0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004368:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2200      	movs	r2, #0
 8004380:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7c1b      	ldrb	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004396:	2101      	movs	r1, #1
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f002 f91f 	bl	80065dc <USBD_LL_PrepareReceive>
 800439e:	e007      	b.n	80043b0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043a6:	2340      	movs	r3, #64	; 0x40
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f002 f916 	bl	80065dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	460b      	mov	r3, r1
 80043c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80043ca:	2181      	movs	r1, #129	; 0x81
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f002 f83a 	bl	8006446 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80043d8:	2101      	movs	r1, #1
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f002 f833 	bl	8006446 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80043e8:	2182      	movs	r1, #130	; 0x82
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f002 f82b 	bl	8006446 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004410:	4618      	mov	r0, r3
 8004412:	f002 faaf 	bl	8006974 <free>
    pdev->pClassData = NULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004438:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800444e:	2b00      	cmp	r3, #0
 8004450:	d039      	beq.n	80044c6 <USBD_CDC_Setup+0x9e>
 8004452:	2b20      	cmp	r3, #32
 8004454:	d17c      	bne.n	8004550 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	88db      	ldrh	r3, [r3, #6]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d029      	beq.n	80044b2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b25b      	sxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	da11      	bge.n	800448c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8004474:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	88d2      	ldrh	r2, [r2, #6]
 800447a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800447c:	6939      	ldr	r1, [r7, #16]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	88db      	ldrh	r3, [r3, #6]
 8004482:	461a      	mov	r2, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f001 f9c9 	bl	800581c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800448a:	e068      	b.n	800455e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	785a      	ldrb	r2, [r3, #1]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	88db      	ldrh	r3, [r3, #6]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80044a2:	6939      	ldr	r1, [r7, #16]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	88db      	ldrh	r3, [r3, #6]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f001 f9e4 	bl	8005878 <USBD_CtlPrepareRx>
    break;
 80044b0:	e055      	b.n	800455e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	7850      	ldrb	r0, [r2, #1]
 80044be:	2200      	movs	r2, #0
 80044c0:	6839      	ldr	r1, [r7, #0]
 80044c2:	4798      	blx	r3
    break;
 80044c4:	e04b      	b.n	800455e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	2b0a      	cmp	r3, #10
 80044cc:	d017      	beq.n	80044fe <USBD_CDC_Setup+0xd6>
 80044ce:	2b0b      	cmp	r3, #11
 80044d0:	d029      	beq.n	8004526 <USBD_CDC_Setup+0xfe>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d133      	bne.n	800453e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d107      	bne.n	80044f0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	2202      	movs	r2, #2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f001 f997 	bl	800581c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80044ee:	e02e      	b.n	800454e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 f927 	bl	8005746 <USBD_CtlError>
			  ret = USBD_FAIL;
 80044f8:	2302      	movs	r3, #2
 80044fa:	75fb      	strb	r3, [r7, #23]
      break;
 80044fc:	e027      	b.n	800454e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004504:	2b03      	cmp	r3, #3
 8004506:	d107      	bne.n	8004518 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8004508:	f107 030f 	add.w	r3, r7, #15
 800450c:	2201      	movs	r2, #1
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f001 f983 	bl	800581c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004516:	e01a      	b.n	800454e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f001 f913 	bl	8005746 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004520:	2302      	movs	r3, #2
 8004522:	75fb      	strb	r3, [r7, #23]
      break;
 8004524:	e013      	b.n	800454e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800452c:	2b03      	cmp	r3, #3
 800452e:	d00d      	beq.n	800454c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 f907 	bl	8005746 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004538:	2302      	movs	r3, #2
 800453a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800453c:	e006      	b.n	800454c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f001 f900 	bl	8005746 <USBD_CtlError>
      ret = USBD_FAIL;
 8004546:	2302      	movs	r3, #2
 8004548:	75fb      	strb	r3, [r7, #23]
      break;
 800454a:	e000      	b.n	800454e <USBD_CDC_Setup+0x126>
      break;
 800454c:	bf00      	nop
    }
    break;
 800454e:	e006      	b.n	800455e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 f8f7 	bl	8005746 <USBD_CtlError>
    ret = USBD_FAIL;
 8004558:	2302      	movs	r3, #2
 800455a:	75fb      	strb	r3, [r7, #23]
    break;
 800455c:	bf00      	nop
  }

  return ret;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800457a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8004582:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800458a:	2b00      	cmp	r3, #0
 800458c:	d03a      	beq.n	8004604 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	331c      	adds	r3, #28
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d029      	beq.n	80045f8 <USBD_CDC_DataIn+0x90>
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	331c      	adds	r3, #28
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	78f9      	ldrb	r1, [r7, #3]
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	460b      	mov	r3, r1
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	1a5b      	subs	r3, r3, r1
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4403      	add	r3, r0
 80045c4:	3344      	adds	r3, #68	; 0x44
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80045cc:	fb03 f301 	mul.w	r3, r3, r1
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d110      	bne.n	80045f8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	331c      	adds	r3, #28
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80045ea:	78f9      	ldrb	r1, [r7, #3]
 80045ec:	2300      	movs	r3, #0
 80045ee:	2200      	movs	r2, #0
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 ffd0 	bl	8006596 <USBD_LL_Transmit>
 80045f6:	e003      	b.n	8004600 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004620:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f001 fffb 	bl	8006622 <USBD_LL_GetRxDataSize>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004652:	4611      	mov	r1, r2
 8004654:	4798      	blx	r3

    return USBD_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004672:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800467a:	2b00      	cmp	r3, #0
 800467c:	d015      	beq.n	80046aa <USBD_CDC_EP0_RxReady+0x46>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004684:	2bff      	cmp	r3, #255	; 0xff
 8004686:	d010      	beq.n	80046aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004696:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800469e:	b292      	uxth	r2, r2
 80046a0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2243      	movs	r2, #67	; 0x43
 80046c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80046c2:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	20000090 	.word	0x20000090

080046d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2243      	movs	r2, #67	; 0x43
 80046e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80046e2:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	2000004c 	.word	0x2000004c

080046f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2243      	movs	r2, #67	; 0x43
 8004700:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004702:	4b03      	ldr	r3, [pc, #12]	; (8004710 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	200000d4 	.word	0x200000d4

08004714 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	220a      	movs	r2, #10
 8004720:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004722:	4b03      	ldr	r3, [pc, #12]	; (8004730 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000008 	.word	0x20000008

08004734 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800473e:	2302      	movs	r3, #2
 8004740:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004762:	b480      	push	{r7}
 8004764:	b087      	sub	sp, #28
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	4613      	mov	r3, r2
 800476e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004776:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047cc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01c      	beq.n	8004812 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d115      	bne.n	800480e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004800:	b29b      	uxth	r3, r3
 8004802:	2181      	movs	r1, #129	; 0x81
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 fec6 	bl	8006596 <USBD_LL_Transmit>

      return USBD_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e002      	b.n	8004814 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800482a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004832:	2b00      	cmp	r3, #0
 8004834:	d017      	beq.n	8004866 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	7c1b      	ldrb	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004848:	2101      	movs	r1, #1
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f001 fec6 	bl	80065dc <USBD_LL_PrepareReceive>
 8004850:	e007      	b.n	8004862 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	2101      	movs	r1, #1
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f001 febd 	bl	80065dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004884:	2302      	movs	r3, #2
 8004886:	e01a      	b.n	80048be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	79fa      	ldrb	r2, [r7, #7]
 80048b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f001 fd32 	bl	8006320 <USBD_LL_Init>

  return USBD_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e001      	b.n	80048ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80048e8:	2302      	movs	r3, #2
 80048ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f001 fd5e 	bl	80063c4 <USBD_LL_Start>

  return USBD_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004934:	2302      	movs	r3, #2
 8004936:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4611      	mov	r1, r2
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	4611      	mov	r1, r2
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
  return USBD_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fe94 	bl	80056cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80049b2:	461a      	mov	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d00c      	beq.n	80049e2 <USBD_LL_SetupStage+0x56>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d302      	bcc.n	80049d2 <USBD_LL_SetupStage+0x46>
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d010      	beq.n	80049f2 <USBD_LL_SetupStage+0x66>
 80049d0:	e017      	b.n	8004a02 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa04 	bl	8004de8 <USBD_StdDevReq>
    break;
 80049e0:	e01a      	b.n	8004a18 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa66 	bl	8004ebc <USBD_StdItfReq>
    break;
 80049f0:	e012      	b.n	8004a18 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 faa4 	bl	8004f48 <USBD_StdEPReq>
    break;
 8004a00:	e00a      	b.n	8004a18 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 fd37 	bl	8006484 <USBD_LL_StallEP>
    break;
 8004a16:	bf00      	nop
  }

  return USBD_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d14b      	bne.n	8004ace <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004a3c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d134      	bne.n	8004ab2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d919      	bls.n	8004a88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	1ad2      	subs	r2, r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d203      	bcs.n	8004a76 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	e002      	b.n	8004a7c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 ff17 	bl	80058b4 <USBD_CtlContinueRx>
 8004a86:	e038      	b.n	8004afa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d105      	bne.n	8004aaa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 ff14 	bl	80058d8 <USBD_CtlSendStatus>
 8004ab0:	e023      	b.n	8004afa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004ab8:	2b05      	cmp	r3, #5
 8004aba:	d11e      	bne.n	8004afa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f001 fcdc 	bl	8006484 <USBD_LL_StallEP>
 8004acc:	e015      	b.n	8004afa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d108      	bne.n	8004af6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	7afa      	ldrb	r2, [r7, #11]
 8004aee:	4611      	mov	r1, r2
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	4798      	blx	r3
 8004af4:	e001      	b.n	8004afa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004af6:	2302      	movs	r3, #2
 8004af8:	e000      	b.n	8004afc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d17f      	bne.n	8004c18 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d15c      	bne.n	8004be2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d915      	bls.n	8004b60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	1ad2      	subs	r2, r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fe81 	bl	8005854 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004b52:	2300      	movs	r3, #0
 8004b54:	2200      	movs	r2, #0
 8004b56:	2100      	movs	r1, #0
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f001 fd3f 	bl	80065dc <USBD_LL_PrepareReceive>
 8004b5e:	e04e      	b.n	8004bfe <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	6912      	ldr	r2, [r2, #16]
 8004b68:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b6c:	fb02 f201 	mul.w	r2, r2, r1
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11c      	bne.n	8004bb0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d316      	bcc.n	8004bb0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d20f      	bcs.n	8004bb0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b90:	2200      	movs	r2, #0
 8004b92:	2100      	movs	r1, #0
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fe5d 	bl	8005854 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f001 fd17 	bl	80065dc <USBD_LL_PrepareReceive>
 8004bae:	e026      	b.n	8004bfe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d105      	bne.n	8004bd2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004bd2:	2180      	movs	r1, #128	; 0x80
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f001 fc55 	bl	8006484 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fe8f 	bl	80058fe <USBD_CtlReceiveStatus>
 8004be0:	e00d      	b.n	8004bfe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d004      	beq.n	8004bf6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f001 fc43 	bl	8006484 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d11d      	bne.n	8004c44 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff fe82 	bl	8004912 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004c16:	e015      	b.n	8004c44 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d108      	bne.n	8004c40 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	7afa      	ldrb	r2, [r7, #11]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	4798      	blx	r3
 8004c3e:	e001      	b.n	8004c44 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c40:	2302      	movs	r3, #2
 8004c42:	e000      	b.n	8004c46 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c56:	2340      	movs	r3, #64	; 0x40
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 fbcc 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2240      	movs	r2, #64	; 0x40
 8004c6e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 fbbe 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2240      	movs	r2, #64	; 0x40
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6852      	ldr	r2, [r2, #4]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
  }

  return USBD_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2204      	movs	r2, #4
 8004d08:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d10b      	bne.n	8004d66 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6852      	ldr	r2, [r2, #4]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	4611      	mov	r1, r2
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3

  return USBD_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d004      	beq.n	8004e0c <USBD_StdDevReq+0x24>
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d002      	beq.n	8004e0c <USBD_StdDevReq+0x24>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <USBD_StdDevReq+0x34>
 8004e0a:	e04c      	b.n	8004ea6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
    break;
 8004e1a:	e049      	b.n	8004eb0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b09      	cmp	r3, #9
 8004e22:	d83a      	bhi.n	8004e9a <USBD_StdDevReq+0xb2>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <USBD_StdDevReq+0x44>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e7d 	.word	0x08004e7d
 8004e30:	08004e91 	.word	0x08004e91
 8004e34:	08004e9b 	.word	0x08004e9b
 8004e38:	08004e87 	.word	0x08004e87
 8004e3c:	08004e9b 	.word	0x08004e9b
 8004e40:	08004e5f 	.word	0x08004e5f
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e9b 	.word	0x08004e9b
 8004e4c:	08004e73 	.word	0x08004e73
 8004e50:	08004e69 	.word	0x08004e69
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9d2 	bl	8005200 <USBD_GetDescriptor>
      break;
 8004e5c:	e022      	b.n	8004ea4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fac7 	bl	80053f4 <USBD_SetAddress>
      break;
 8004e66:	e01d      	b.n	8004ea4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb04 	bl	8005478 <USBD_SetConfig>
      break;
 8004e70:	e018      	b.n	8004ea4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb8d 	bl	8005594 <USBD_GetConfig>
      break;
 8004e7a:	e013      	b.n	8004ea4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fbbc 	bl	80055fc <USBD_GetStatus>
      break;
 8004e84:	e00e      	b.n	8004ea4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fbea 	bl	8005662 <USBD_SetFeature>
      break;
 8004e8e:	e009      	b.n	8004ea4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fbf9 	bl	800568a <USBD_ClrFeature>
      break;
 8004e98:	e004      	b.n	8004ea4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fc52 	bl	8005746 <USBD_CtlError>
      break;
 8004ea2:	bf00      	nop
    }
    break;
 8004ea4:	e004      	b.n	8004eb0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fc4c 	bl	8005746 <USBD_CtlError>
    break;
 8004eae:	bf00      	nop
  }

  return ret;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop

08004ebc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d003      	beq.n	8004ede <USBD_StdItfReq+0x22>
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d001      	beq.n	8004ede <USBD_StdItfReq+0x22>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d12a      	bne.n	8004f34 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d81d      	bhi.n	8004f26 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	889b      	ldrh	r3, [r3, #4]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d813      	bhi.n	8004f1c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	88db      	ldrh	r3, [r3, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d110      	bne.n	8004f30 <USBD_StdItfReq+0x74>
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fcdf 	bl	80058d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004f1a:	e009      	b.n	8004f30 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fc11 	bl	8005746 <USBD_CtlError>
      break;
 8004f24:	e004      	b.n	8004f30 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fc0c 	bl	8005746 <USBD_CtlError>
      break;
 8004f2e:	e000      	b.n	8004f32 <USBD_StdItfReq+0x76>
      break;
 8004f30:	bf00      	nop
    }
    break;
 8004f32:	e004      	b.n	8004f3e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fc05 	bl	8005746 <USBD_CtlError>
    break;
 8004f3c:	bf00      	nop
  }

  return USBD_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	889b      	ldrh	r3, [r3, #4]
 8004f5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d004      	beq.n	8004f72 <USBD_StdEPReq+0x2a>
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d002      	beq.n	8004f72 <USBD_StdEPReq+0x2a>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <USBD_StdEPReq+0x3a>
 8004f70:	e13b      	b.n	80051ea <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
    break;
 8004f80:	e138      	b.n	80051f4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d10a      	bne.n	8004fa4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	e128      	b.n	80051f6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d03e      	beq.n	800502a <USBD_StdEPReq+0xe2>
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d002      	beq.n	8004fb6 <USBD_StdEPReq+0x6e>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d070      	beq.n	8005096 <USBD_StdEPReq+0x14e>
 8004fb4:	e113      	b.n	80051de <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d002      	beq.n	8004fc6 <USBD_StdEPReq+0x7e>
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d015      	beq.n	8004ff0 <USBD_StdEPReq+0xa8>
 8004fc4:	e02b      	b.n	800501e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fc6:	7bbb      	ldrb	r3, [r7, #14]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00c      	beq.n	8004fe6 <USBD_StdEPReq+0x9e>
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d009      	beq.n	8004fe6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004fd2:	7bbb      	ldrb	r3, [r7, #14]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fa54 	bl	8006484 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fa50 	bl	8006484 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004fe4:	e020      	b.n	8005028 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fbac 	bl	8005746 <USBD_CtlError>
        break;
 8004fee:	e01b      	b.n	8005028 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	885b      	ldrh	r3, [r3, #2]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10e      	bne.n	8005016 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <USBD_StdEPReq+0xce>
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d008      	beq.n	8005016 <USBD_StdEPReq+0xce>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	88db      	ldrh	r3, [r3, #6]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 fa37 	bl	8006484 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fc5e 	bl	80058d8 <USBD_CtlSendStatus>

        break;
 800501c:	e004      	b.n	8005028 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb90 	bl	8005746 <USBD_CtlError>
        break;
 8005026:	bf00      	nop
      }
      break;
 8005028:	e0de      	b.n	80051e8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005030:	2b02      	cmp	r3, #2
 8005032:	d002      	beq.n	800503a <USBD_StdEPReq+0xf2>
 8005034:	2b03      	cmp	r3, #3
 8005036:	d015      	beq.n	8005064 <USBD_StdEPReq+0x11c>
 8005038:	e026      	b.n	8005088 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800503a:	7bbb      	ldrb	r3, [r7, #14]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00c      	beq.n	800505a <USBD_StdEPReq+0x112>
 8005040:	7bbb      	ldrb	r3, [r7, #14]
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d009      	beq.n	800505a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005046:	7bbb      	ldrb	r3, [r7, #14]
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 fa1a 	bl	8006484 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005050:	2180      	movs	r1, #128	; 0x80
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 fa16 	bl	8006484 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005058:	e01c      	b.n	8005094 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fb72 	bl	8005746 <USBD_CtlError>
        break;
 8005062:	e017      	b.n	8005094 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	885b      	ldrh	r3, [r3, #2]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d112      	bne.n	8005092 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800506c:	7bbb      	ldrb	r3, [r7, #14]
 800506e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005076:	7bbb      	ldrb	r3, [r7, #14]
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 fa21 	bl	80064c2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fc29 	bl	80058d8 <USBD_CtlSendStatus>
        }
        break;
 8005086:	e004      	b.n	8005092 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fb5b 	bl	8005746 <USBD_CtlError>
        break;
 8005090:	e000      	b.n	8005094 <USBD_StdEPReq+0x14c>
        break;
 8005092:	bf00      	nop
      }
      break;
 8005094:	e0a8      	b.n	80051e8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800509c:	2b02      	cmp	r3, #2
 800509e:	d002      	beq.n	80050a6 <USBD_StdEPReq+0x15e>
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d031      	beq.n	8005108 <USBD_StdEPReq+0x1c0>
 80050a4:	e095      	b.n	80051d2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050a6:	7bbb      	ldrb	r3, [r7, #14]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <USBD_StdEPReq+0x174>
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d004      	beq.n	80050bc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb46 	bl	8005746 <USBD_CtlError>
          break;
 80050ba:	e08f      	b.n	80051dc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80050bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da0b      	bge.n	80050dc <USBD_StdEPReq+0x194>
 80050c4:	7bbb      	ldrb	r3, [r7, #14]
 80050c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3310      	adds	r3, #16
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	3304      	adds	r3, #4
 80050da:	e00a      	b.n	80050f2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80050dc:	7bbb      	ldrb	r3, [r7, #14]
 80050de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2202      	movs	r2, #2
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fb8b 	bl	800581c <USBD_CtlSendData>
          break;
 8005106:	e069      	b.n	80051dc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800510c:	2b00      	cmp	r3, #0
 800510e:	da11      	bge.n	8005134 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	3318      	adds	r3, #24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d117      	bne.n	800515a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fb0a 	bl	8005746 <USBD_CtlError>
            break;
 8005132:	e053      	b.n	80051dc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 faf7 	bl	8005746 <USBD_CtlError>
            break;
 8005158:	e040      	b.n	80051dc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800515a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800515e:	2b00      	cmp	r3, #0
 8005160:	da0b      	bge.n	800517a <USBD_StdEPReq+0x232>
 8005162:	7bbb      	ldrb	r3, [r7, #14]
 8005164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	3310      	adds	r3, #16
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	3304      	adds	r3, #4
 8005178:	e00a      	b.n	8005190 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800517a:	7bbb      	ldrb	r3, [r7, #14]
 800517c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4413      	add	r3, r2
 8005190:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005192:	7bbb      	ldrb	r3, [r7, #14]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <USBD_StdEPReq+0x256>
 8005198:	7bbb      	ldrb	r3, [r7, #14]
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d103      	bne.n	80051a6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e00e      	b.n	80051c4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80051a6:	7bbb      	ldrb	r3, [r7, #14]
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 f9a8 	bl	8006500 <USBD_LL_IsStallEP>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e002      	b.n	80051c4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2202      	movs	r2, #2
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb26 	bl	800581c <USBD_CtlSendData>
          break;
 80051d0:	e004      	b.n	80051dc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fab6 	bl	8005746 <USBD_CtlError>
        break;
 80051da:	bf00      	nop
      }
      break;
 80051dc:	e004      	b.n	80051e8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fab0 	bl	8005746 <USBD_CtlError>
      break;
 80051e6:	bf00      	nop
    }
    break;
 80051e8:	e004      	b.n	80051f4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 faaa 	bl	8005746 <USBD_CtlError>
    break;
 80051f2:	bf00      	nop
  }

  return ret;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	885b      	ldrh	r3, [r3, #2]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	2b06      	cmp	r3, #6
 8005216:	f200 80c9 	bhi.w	80053ac <USBD_GetDescriptor+0x1ac>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <USBD_GetDescriptor+0x20>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	0800523d 	.word	0x0800523d
 8005224:	08005255 	.word	0x08005255
 8005228:	08005295 	.word	0x08005295
 800522c:	080053ad 	.word	0x080053ad
 8005230:	080053ad 	.word	0x080053ad
 8005234:	08005359 	.word	0x08005359
 8005238:	0800537f 	.word	0x0800537f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	7c12      	ldrb	r2, [r2, #16]
 8005248:	f107 010a 	add.w	r1, r7, #10
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
 8005250:	60f8      	str	r0, [r7, #12]
    break;
 8005252:	e0b0      	b.n	80053b6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7c1b      	ldrb	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10d      	bne.n	8005278 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	f107 020a 	add.w	r2, r7, #10
 8005268:	4610      	mov	r0, r2
 800526a:	4798      	blx	r3
 800526c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	2202      	movs	r2, #2
 8005274:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005276:	e09e      	b.n	80053b6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	f107 020a 	add.w	r2, r7, #10
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
 8005288:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	2202      	movs	r2, #2
 8005290:	701a      	strb	r2, [r3, #0]
    break;
 8005292:	e090      	b.n	80053b6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	885b      	ldrh	r3, [r3, #2]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b05      	cmp	r3, #5
 800529c:	d856      	bhi.n	800534c <USBD_GetDescriptor+0x14c>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <USBD_GetDescriptor+0xa4>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052bd 	.word	0x080052bd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	080052ed 	.word	0x080052ed
 80052b0:	08005305 	.word	0x08005305
 80052b4:	0800531d 	.word	0x0800531d
 80052b8:	08005335 	.word	0x08005335
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	7c12      	ldrb	r2, [r2, #16]
 80052c8:	f107 010a 	add.w	r1, r7, #10
 80052cc:	4610      	mov	r0, r2
 80052ce:	4798      	blx	r3
 80052d0:	60f8      	str	r0, [r7, #12]
      break;
 80052d2:	e040      	b.n	8005356 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	7c12      	ldrb	r2, [r2, #16]
 80052e0:	f107 010a 	add.w	r1, r7, #10
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	60f8      	str	r0, [r7, #12]
      break;
 80052ea:	e034      	b.n	8005356 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	7c12      	ldrb	r2, [r2, #16]
 80052f8:	f107 010a 	add.w	r1, r7, #10
 80052fc:	4610      	mov	r0, r2
 80052fe:	4798      	blx	r3
 8005300:	60f8      	str	r0, [r7, #12]
      break;
 8005302:	e028      	b.n	8005356 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	7c12      	ldrb	r2, [r2, #16]
 8005310:	f107 010a 	add.w	r1, r7, #10
 8005314:	4610      	mov	r0, r2
 8005316:	4798      	blx	r3
 8005318:	60f8      	str	r0, [r7, #12]
      break;
 800531a:	e01c      	b.n	8005356 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	7c12      	ldrb	r2, [r2, #16]
 8005328:	f107 010a 	add.w	r1, r7, #10
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
 8005330:	60f8      	str	r0, [r7, #12]
      break;
 8005332:	e010      	b.n	8005356 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	7c12      	ldrb	r2, [r2, #16]
 8005340:	f107 010a 	add.w	r1, r7, #10
 8005344:	4610      	mov	r0, r2
 8005346:	4798      	blx	r3
 8005348:	60f8      	str	r0, [r7, #12]
      break;
 800534a:	e004      	b.n	8005356 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9f9 	bl	8005746 <USBD_CtlError>
      return;
 8005354:	e04b      	b.n	80053ee <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8005356:	e02e      	b.n	80053b6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	7c1b      	ldrb	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	f107 020a 	add.w	r2, r7, #10
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
 8005370:	60f8      	str	r0, [r7, #12]
      break;
 8005372:	e020      	b.n	80053b6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9e5 	bl	8005746 <USBD_CtlError>
      return;
 800537c:	e037      	b.n	80053ee <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7c1b      	ldrb	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	f107 020a 	add.w	r2, r7, #10
 8005392:	4610      	mov	r0, r2
 8005394:	4798      	blx	r3
 8005396:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	2207      	movs	r2, #7
 800539e:	701a      	strb	r2, [r3, #0]
      break;
 80053a0:	e009      	b.n	80053b6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9ce 	bl	8005746 <USBD_CtlError>
      return;
 80053aa:	e020      	b.n	80053ee <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f9c9 	bl	8005746 <USBD_CtlError>
    return;
 80053b4:	e01b      	b.n	80053ee <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80053b6:	897b      	ldrh	r3, [r7, #10]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d011      	beq.n	80053e0 <USBD_GetDescriptor+0x1e0>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	88db      	ldrh	r3, [r3, #6]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	88da      	ldrh	r2, [r3, #6]
 80053c8:	897b      	ldrh	r3, [r7, #10]
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bf28      	it	cs
 80053ce:	4613      	movcs	r3, r2
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	461a      	mov	r2, r3
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa1e 	bl	800581c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	88db      	ldrh	r3, [r3, #6]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d102      	bne.n	80053ee <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa75 	bl	80058d8 <USBD_CtlSendStatus>
  }
}
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	889b      	ldrh	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d130      	bne.n	8005468 <USBD_SetAddress+0x74>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	88db      	ldrh	r3, [r3, #6]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d12c      	bne.n	8005468 <USBD_SetAddress+0x74>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	885b      	ldrh	r3, [r3, #2]
 8005412:	2b7f      	cmp	r3, #127	; 0x7f
 8005414:	d828      	bhi.n	8005468 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	885b      	ldrh	r3, [r3, #2]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005420:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005428:	2b03      	cmp	r3, #3
 800542a:	d104      	bne.n	8005436 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f989 	bl	8005746 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005434:	e01c      	b.n	8005470 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	7bfa      	ldrb	r2, [r7, #15]
 800543a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 f888 	bl	8006558 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa45 	bl	80058d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800545c:	e008      	b.n	8005470 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005466:	e003      	b.n	8005470 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f96b 	bl	8005746 <USBD_CtlError>
  }
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	885b      	ldrh	r3, [r3, #2]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	4b41      	ldr	r3, [pc, #260]	; (8005590 <USBD_SetConfig+0x118>)
 800548a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800548c:	4b40      	ldr	r3, [pc, #256]	; (8005590 <USBD_SetConfig+0x118>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d904      	bls.n	800549e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f955 	bl	8005746 <USBD_CtlError>
 800549c:	e075      	b.n	800558a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d002      	beq.n	80054ae <USBD_SetConfig+0x36>
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d023      	beq.n	80054f4 <USBD_SetConfig+0x7c>
 80054ac:	e062      	b.n	8005574 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80054ae:	4b38      	ldr	r3, [pc, #224]	; (8005590 <USBD_SetConfig+0x118>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01a      	beq.n	80054ec <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80054b6:	4b36      	ldr	r3, [pc, #216]	; (8005590 <USBD_SetConfig+0x118>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2203      	movs	r2, #3
 80054c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80054c8:	4b31      	ldr	r3, [pc, #196]	; (8005590 <USBD_SetConfig+0x118>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fa2a 	bl	8004928 <USBD_SetClassConfig>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d104      	bne.n	80054e4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f932 	bl	8005746 <USBD_CtlError>
          return;
 80054e2:	e052      	b.n	800558a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f9f7 	bl	80058d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80054ea:	e04e      	b.n	800558a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9f3 	bl	80058d8 <USBD_CtlSendStatus>
      break;
 80054f2:	e04a      	b.n	800558a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <USBD_SetConfig+0x118>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d112      	bne.n	8005522 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <USBD_SetConfig+0x118>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <USBD_SetConfig+0x118>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fa26 	bl	8004966 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9dc 	bl	80058d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005520:	e033      	b.n	800558a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8005522:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <USBD_SetConfig+0x118>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d01d      	beq.n	800556c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff fa14 	bl	8004966 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <USBD_SetConfig+0x118>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <USBD_SetConfig+0x118>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff f9ea 	bl	8004928 <USBD_SetClassConfig>
 8005554:	4603      	mov	r3, r0
 8005556:	2b02      	cmp	r3, #2
 8005558:	d104      	bne.n	8005564 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f8f2 	bl	8005746 <USBD_CtlError>
          return;
 8005562:	e012      	b.n	800558a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f9b7 	bl	80058d8 <USBD_CtlSendStatus>
      break;
 800556a:	e00e      	b.n	800558a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f9b3 	bl	80058d8 <USBD_CtlSendStatus>
      break;
 8005572:	e00a      	b.n	800558a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8e5 	bl	8005746 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <USBD_SetConfig+0x118>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff f9ef 	bl	8004966 <USBD_ClrClassConfig>
      break;
 8005588:	bf00      	nop
    }
  }
}
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	200001fc 	.word	0x200001fc

08005594 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	88db      	ldrh	r3, [r3, #6]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d004      	beq.n	80055b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f8cc 	bl	8005746 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80055ae:	e021      	b.n	80055f4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	db17      	blt.n	80055ea <USBD_GetConfig+0x56>
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	dd02      	ble.n	80055c4 <USBD_GetConfig+0x30>
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d00b      	beq.n	80055da <USBD_GetConfig+0x46>
 80055c2:	e012      	b.n	80055ea <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3308      	adds	r3, #8
 80055ce:	2201      	movs	r2, #1
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f922 	bl	800581c <USBD_CtlSendData>
      break;
 80055d8:	e00c      	b.n	80055f4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3304      	adds	r3, #4
 80055de:	2201      	movs	r2, #1
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f91a 	bl	800581c <USBD_CtlSendData>
      break;
 80055e8:	e004      	b.n	80055f4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8aa 	bl	8005746 <USBD_CtlError>
      break;
 80055f2:	bf00      	nop
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800560c:	3b01      	subs	r3, #1
 800560e:	2b02      	cmp	r3, #2
 8005610:	d81e      	bhi.n	8005650 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	88db      	ldrh	r3, [r3, #6]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d004      	beq.n	8005624 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f892 	bl	8005746 <USBD_CtlError>
      break;
 8005622:	e01a      	b.n	800565a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f043 0202 	orr.w	r2, r3, #2
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	330c      	adds	r3, #12
 8005644:	2202      	movs	r2, #2
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8e7 	bl	800581c <USBD_CtlSendData>
    break;
 800564e:	e004      	b.n	800565a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f877 	bl	8005746 <USBD_CtlError>
    break;
 8005658:	bf00      	nop
  }
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	885b      	ldrh	r3, [r3, #2]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f92b 	bl	80058d8 <USBD_CtlSendStatus>
  }

}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800569a:	3b01      	subs	r3, #1
 800569c:	2b02      	cmp	r3, #2
 800569e:	d80b      	bhi.n	80056b8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	885b      	ldrh	r3, [r3, #2]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10c      	bne.n	80056c2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f911 	bl	80058d8 <USBD_CtlSendStatus>
    }
    break;
 80056b6:	e004      	b.n	80056c2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f843 	bl	8005746 <USBD_CtlError>
    break;
 80056c0:	e000      	b.n	80056c4 <USBD_ClrFeature+0x3a>
    break;
 80056c2:	bf00      	nop
  }
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	785a      	ldrb	r2, [r3, #1]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	3302      	adds	r3, #2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	3303      	adds	r3, #3
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	b29a      	uxth	r2, r3
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	3305      	adds	r3, #5
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	b29b      	uxth	r3, r3
 8005716:	4413      	add	r3, r2
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	3306      	adds	r3, #6
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	b29a      	uxth	r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	3307      	adds	r3, #7
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	b29b      	uxth	r3, r3
 8005732:	4413      	add	r3, r2
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	80da      	strh	r2, [r3, #6]

}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005750:	2180      	movs	r1, #128	; 0x80
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fe96 	bl	8006484 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005758:	2100      	movs	r1, #0
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fe92 	bl	8006484 <USBD_LL_StallEP>
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d032      	beq.n	80057e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f834 	bl	80057ec <USBD_GetLen>
 8005784:	4603      	mov	r3, r0
 8005786:	3301      	adds	r3, #1
 8005788:	b29b      	uxth	r3, r3
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	75fa      	strb	r2, [r7, #23]
 8005798:	461a      	mov	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	75fa      	strb	r2, [r7, #23]
 80057aa:	461a      	mov	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4413      	add	r3, r2
 80057b0:	2203      	movs	r2, #3
 80057b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80057b4:	e012      	b.n	80057dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	60fa      	str	r2, [r7, #12]
 80057bc:	7dfa      	ldrb	r2, [r7, #23]
 80057be:	1c51      	adds	r1, r2, #1
 80057c0:	75f9      	strb	r1, [r7, #23]
 80057c2:	4611      	mov	r1, r2
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	440a      	add	r2, r1
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	75fa      	strb	r2, [r7, #23]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4413      	add	r3, r2
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e8      	bne.n	80057b6 <USBD_GetString+0x4e>
    }
  }
}
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80057f8:	e005      	b.n	8005806 <USBD_GetLen+0x1a>
    {
        len++;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	3301      	adds	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3301      	adds	r3, #1
 8005804:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f5      	bne.n	80057fa <USBD_GetLen+0xe>
    }

    return len;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2202      	movs	r2, #2
 800582e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005838:	88fa      	ldrh	r2, [r7, #6]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	2100      	movs	r1, #0
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fea6 	bl	8006596 <USBD_LL_Transmit>

  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	2100      	movs	r1, #0
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fe94 	bl	8006596 <USBD_LL_Transmit>

  return USBD_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2203      	movs	r2, #3
 800588a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	2100      	movs	r1, #0
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fe99 	bl	80065dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	2100      	movs	r1, #0
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fe87 	bl	80065dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2204      	movs	r2, #4
 80058e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80058e8:	2300      	movs	r3, #0
 80058ea:	2200      	movs	r2, #0
 80058ec:	2100      	movs	r1, #0
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fe51 	bl	8006596 <USBD_LL_Transmit>

  return USBD_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2205      	movs	r2, #5
 800590a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800590e:	2300      	movs	r3, #0
 8005910:	2200      	movs	r2, #0
 8005912:	2100      	movs	r1, #0
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fe61 	bl	80065dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592a:	f107 031c 	add.w	r3, r7, #28
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	4b45      	ldr	r3, [pc, #276]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	4a44      	ldr	r2, [pc, #272]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	6313      	str	r3, [r2, #48]	; 0x30
 800594a:	4b42      	ldr	r3, [pc, #264]	; (8005a54 <MX_GPIO_Init+0x130>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	4b3e      	ldr	r3, [pc, #248]	; (8005a54 <MX_GPIO_Init+0x130>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	4a3d      	ldr	r2, [pc, #244]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005964:	6313      	str	r3, [r2, #48]	; 0x30
 8005966:	4b3b      	ldr	r3, [pc, #236]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	4b37      	ldr	r3, [pc, #220]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	4a36      	ldr	r2, [pc, #216]	; (8005a54 <MX_GPIO_Init+0x130>)
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	6313      	str	r3, [r2, #48]	; 0x30
 8005982:	4b34      	ldr	r3, [pc, #208]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	4b30      	ldr	r3, [pc, #192]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	4a2f      	ldr	r2, [pc, #188]	; (8005a54 <MX_GPIO_Init+0x130>)
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	6313      	str	r3, [r2, #48]	; 0x30
 800599e:	4b2d      	ldr	r3, [pc, #180]	; (8005a54 <MX_GPIO_Init+0x130>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	4b29      	ldr	r3, [pc, #164]	; (8005a54 <MX_GPIO_Init+0x130>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <MX_GPIO_Init+0x130>)
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	6313      	str	r3, [r2, #48]	; 0x30
 80059ba:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <MX_GPIO_Init+0x130>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	60bb      	str	r3, [r7, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	4b22      	ldr	r3, [pc, #136]	; (8005a54 <MX_GPIO_Init+0x130>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <MX_GPIO_Init+0x130>)
 80059d0:	f043 0308 	orr.w	r3, r3, #8
 80059d4:	6313      	str	r3, [r2, #48]	; 0x30
 80059d6:	4b1f      	ldr	r3, [pc, #124]	; (8005a54 <MX_GPIO_Init+0x130>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_CS_Pin_GPIO_Port, ILI9341_CS_Pin_Pin, GPIO_PIN_RESET);
 80059e2:	2200      	movs	r2, #0
 80059e4:	2104      	movs	r1, #4
 80059e6:	481c      	ldr	r0, [pc, #112]	; (8005a58 <MX_GPIO_Init+0x134>)
 80059e8:	f7fb f8ca 	bl	8000b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ILI9341_RES_Pin_Pin|ILI9341_DC_Pin_Pin, GPIO_PIN_RESET);
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80059f2:	481a      	ldr	r0, [pc, #104]	; (8005a5c <MX_GPIO_Init+0x138>)
 80059f4:	f7fb f8c4 	bl	8000b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin_Pin;
 80059f8:	2304      	movs	r3, #4
 80059fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059fc:	2301      	movs	r3, #1
 80059fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ILI9341_CS_Pin_GPIO_Port, &GPIO_InitStruct);
 8005a08:	f107 031c 	add.w	r3, r7, #28
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4812      	ldr	r0, [pc, #72]	; (8005a58 <MX_GPIO_Init+0x134>)
 8005a10:	f7fa ff0c 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a14:	2301      	movs	r3, #1
 8005a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <MX_GPIO_Init+0x13c>)
 8005a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	4619      	mov	r1, r3
 8005a26:	480f      	ldr	r0, [pc, #60]	; (8005a64 <MX_GPIO_Init+0x140>)
 8005a28:	f7fa ff00 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = ILI9341_RES_Pin_Pin|ILI9341_DC_Pin_Pin;
 8005a2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a32:	2301      	movs	r3, #1
 8005a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a3e:	f107 031c 	add.w	r3, r7, #28
 8005a42:	4619      	mov	r1, r3
 8005a44:	4805      	ldr	r0, [pc, #20]	; (8005a5c <MX_GPIO_Init+0x138>)
 8005a46:	f7fa fef1 	bl	800082c <HAL_GPIO_Init>

}
 8005a4a:	bf00      	nop
 8005a4c:	3730      	adds	r7, #48	; 0x30
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40020800 	.word	0x40020800
 8005a5c:	40020c00 	.word	0x40020c00
 8005a60:	10110000 	.word	0x10110000
 8005a64:	40020000 	.word	0x40020000

08005a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char myBuff[20];
	uint32_t cnt = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a72:	f7fa fd95 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a76:	f000 f821 	bl	8005abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a7a:	f7ff ff53 	bl	8005924 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005a7e:	f000 fa29 	bl	8005ed4 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8005a82:	f000 f8a1 	bl	8005bc8 <MX_SPI5_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cnt = cnt + 1;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
	  sprintf(myBuff,"Data = %d\n\r", cnt);
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4909      	ldr	r1, [pc, #36]	; (8005ab8 <main+0x50>)
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f836 	bl	8006b04 <siprintf>
	  CDC_Transmit_HS((uint8_t *)myBuff,strlen(myBuff));
 8005a98:	463b      	mov	r3, r7
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fa fba8 	bl	80001f0 <strlen>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fad1 	bl	8006050 <CDC_Transmit_HS>
	  HAL_Delay(200);
 8005aae:	20c8      	movs	r0, #200	; 0xc8
 8005ab0:	f7fa fdb8 	bl	8000624 <HAL_Delay>
	  cnt = cnt + 1;
 8005ab4:	e7e7      	b.n	8005a86 <main+0x1e>
 8005ab6:	bf00      	nop
 8005ab8:	080071b8 	.word	0x080071b8

08005abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b094      	sub	sp, #80	; 0x50
 8005ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ac2:	f107 0320 	add.w	r3, r7, #32
 8005ac6:	2230      	movs	r2, #48	; 0x30
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 ff5a 	bl	8006984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <SystemClock_Config+0xd0>)
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <SystemClock_Config+0xd0>)
 8005aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aee:	6413      	str	r3, [r2, #64]	; 0x40
 8005af0:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <SystemClock_Config+0xd0>)
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005afc:	2300      	movs	r3, #0
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <SystemClock_Config+0xd4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005b08:	4a21      	ldr	r2, [pc, #132]	; (8005b90 <SystemClock_Config+0xd4>)
 8005b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	4b1f      	ldr	r3, [pc, #124]	; (8005b90 <SystemClock_Config+0xd4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b26:	2302      	movs	r3, #2
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005b30:	2304      	movs	r3, #4
 8005b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005b34:	2348      	movs	r3, #72	; 0x48
 8005b36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b40:	f107 0320 	add.w	r3, r7, #32
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fc f9bf 	bl	8001ec8 <HAL_RCC_OscConfig>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005b50:	f000 f832 	bl	8005bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b54:	230f      	movs	r3, #15
 8005b56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b6c:	f107 030c 	add.w	r3, r7, #12
 8005b70:	2102      	movs	r1, #2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fc fc18 	bl	80023a8 <HAL_RCC_ClockConfig>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005b7e:	f000 f81b 	bl	8005bb8 <Error_Handler>
  }
}
 8005b82:	bf00      	nop
 8005b84:	3750      	adds	r7, #80	; 0x50
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	40007000 	.word	0x40007000

08005b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a04      	ldr	r2, [pc, #16]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005ba6:	f7fa fd1d 	bl	80005e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000

08005bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8005bcc:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005bce:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <MX_SPI5_Init+0x68>)
 8005bd0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005bd2:	4b16      	ldr	r3, [pc, #88]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005bd8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005be0:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005be6:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005c14:	220a      	movs	r2, #10
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005c18:	4804      	ldr	r0, [pc, #16]	; (8005c2c <MX_SPI5_Init+0x64>)
 8005c1a:	f7fc fdd5 	bl	80027c8 <HAL_SPI_Init>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8005c24:	f7ff ffc8 	bl	8005bb8 <Error_Handler>
  }

}
 8005c28:	bf00      	nop
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000210 	.word	0x20000210
 8005c30:	40015000 	.word	0x40015000

08005c34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <HAL_SPI_MspInit+0x84>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d12c      	bne.n	8005cb0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c64:	6453      	str	r3, [r2, #68]	; 0x44
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c7c:	f043 0320 	orr.w	r3, r3, #32
 8005c80:	6313      	str	r3, [r2, #48]	; 0x30
 8005c82:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005c8e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c94:	2302      	movs	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005ca0:	2305      	movs	r3, #5
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4805      	ldr	r0, [pc, #20]	; (8005cc0 <HAL_SPI_MspInit+0x8c>)
 8005cac:	f7fa fdbe 	bl	800082c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	3728      	adds	r7, #40	; 0x28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40015000 	.word	0x40015000
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40021400 	.word	0x40021400

08005cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40023800 	.word	0x40023800

08005d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	; 0x30
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005d24:	2200      	movs	r2, #0
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	2019      	movs	r0, #25
 8005d2a:	f7fa fd55 	bl	80007d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005d2e:	2019      	movs	r0, #25
 8005d30:	f7fa fd6e 	bl	8000810 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <HAL_InitTick+0xa4>)
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <HAL_InitTick+0xa4>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6453      	str	r3, [r2, #68]	; 0x44
 8005d44:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <HAL_InitTick+0xa4>)
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d50:	f107 0210 	add.w	r2, r7, #16
 8005d54:	f107 0314 	add.w	r3, r7, #20
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fc fd02 	bl	8002764 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005d60:	f7fc fcec 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8005d64:	4603      	mov	r3, r0
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <HAL_InitTick+0xa8>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	3b01      	subs	r3, #1
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005d78:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_InitTick+0xac>)
 8005d7a:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <HAL_InitTick+0xb0>)
 8005d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <HAL_InitTick+0xac>)
 8005d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <HAL_InitTick+0xac>)
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <HAL_InitTick+0xac>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_InitTick+0xac>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005d98:	4809      	ldr	r0, [pc, #36]	; (8005dc0 <HAL_InitTick+0xac>)
 8005d9a:	f7fc fd79 	bl	8002890 <HAL_TIM_Base_Init>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005da4:	4806      	ldr	r0, [pc, #24]	; (8005dc0 <HAL_InitTick+0xac>)
 8005da6:	f7fc fda8 	bl	80028fa <HAL_TIM_Base_Start_IT>
 8005daa:	4603      	mov	r3, r0
 8005dac:	e000      	b.n	8005db0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3730      	adds	r7, #48	; 0x30
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	431bde83 	.word	0x431bde83
 8005dc0:	20000268 	.word	0x20000268
 8005dc4:	40010000 	.word	0x40010000

08005dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dda:	e7fe      	b.n	8005dda <HardFault_Handler+0x4>

08005ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005de0:	e7fe      	b.n	8005de0 <MemManage_Handler+0x4>

08005de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005de6:	e7fe      	b.n	8005de6 <BusFault_Handler+0x4>

08005de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dec:	e7fe      	b.n	8005dec <UsageFault_Handler+0x4>

08005dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005e2e:	f7fc fd88 	bl	8002942 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000268 	.word	0x20000268

08005e3c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8005e40:	4802      	ldr	r0, [pc, #8]	; (8005e4c <OTG_HS_IRQHandler+0x10>)
 8005e42:	f7fb f806 	bl	8000e52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20001544 	.word	0x20001544

08005e50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <_sbrk+0x50>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <_sbrk+0x16>
		heap_end = &end;
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <_sbrk+0x50>)
 8005e62:	4a10      	ldr	r2, [pc, #64]	; (8005ea4 <_sbrk+0x54>)
 8005e64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <_sbrk+0x50>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <_sbrk+0x50>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4413      	add	r3, r2
 8005e74:	466a      	mov	r2, sp
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d907      	bls.n	8005e8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005e7a:	f000 fd49 	bl	8006910 <__errno>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	230c      	movs	r3, #12
 8005e82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005e84:	f04f 33ff 	mov.w	r3, #4294967295
 8005e88:	e006      	b.n	8005e98 <_sbrk+0x48>
	}

	heap_end += incr;
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <_sbrk+0x50>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4413      	add	r3, r2
 8005e92:	4a03      	ldr	r2, [pc, #12]	; (8005ea0 <_sbrk+0x50>)
 8005e94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000200 	.word	0x20000200
 8005ea4:	20001b50 	.word	0x20001b50

08005ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005eac:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <SystemInit+0x28>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	4a07      	ldr	r2, [pc, #28]	; (8005ed0 <SystemInit+0x28>)
 8005eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ebc:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <SystemInit+0x28>)
 8005ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ec2:	609a      	str	r2, [r3, #8]
#endif
}
 8005ec4:	bf00      	nop
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	e000ed00 	.word	0xe000ed00

08005ed4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8005ed8:	2201      	movs	r2, #1
 8005eda:	4912      	ldr	r1, [pc, #72]	; (8005f24 <MX_USB_DEVICE_Init+0x50>)
 8005edc:	4812      	ldr	r0, [pc, #72]	; (8005f28 <MX_USB_DEVICE_Init+0x54>)
 8005ede:	f7fe fcc7 	bl	8004870 <USBD_Init>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ee8:	f7ff fe66 	bl	8005bb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8005eec:	490f      	ldr	r1, [pc, #60]	; (8005f2c <MX_USB_DEVICE_Init+0x58>)
 8005eee:	480e      	ldr	r0, [pc, #56]	; (8005f28 <MX_USB_DEVICE_Init+0x54>)
 8005ef0:	f7fe fce9 	bl	80048c6 <USBD_RegisterClass>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005efa:	f7ff fe5d 	bl	8005bb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8005efe:	490c      	ldr	r1, [pc, #48]	; (8005f30 <MX_USB_DEVICE_Init+0x5c>)
 8005f00:	4809      	ldr	r0, [pc, #36]	; (8005f28 <MX_USB_DEVICE_Init+0x54>)
 8005f02:	f7fe fc17 	bl	8004734 <USBD_CDC_RegisterInterface>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005f0c:	f7ff fe54 	bl	8005bb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8005f10:	4805      	ldr	r0, [pc, #20]	; (8005f28 <MX_USB_DEVICE_Init+0x54>)
 8005f12:	f7fe fcf2 	bl	80048fa <USBD_Start>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005f1c:	f7ff fe4c 	bl	8005bb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f20:	bf00      	nop
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	2000012c 	.word	0x2000012c
 8005f28:	200002a8 	.word	0x200002a8
 8005f2c:	20000014 	.word	0x20000014
 8005f30:	2000011c 	.word	0x2000011c

08005f34 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4905      	ldr	r1, [pc, #20]	; (8005f50 <CDC_Init_HS+0x1c>)
 8005f3c:	4805      	ldr	r0, [pc, #20]	; (8005f54 <CDC_Init_HS+0x20>)
 8005f3e:	f7fe fc10 	bl	8004762 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8005f42:	4905      	ldr	r1, [pc, #20]	; (8005f58 <CDC_Init_HS+0x24>)
 8005f44:	4803      	ldr	r0, [pc, #12]	; (8005f54 <CDC_Init_HS+0x20>)
 8005f46:	f7fe fc26 	bl	8004796 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f4a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000d44 	.word	0x20000d44
 8005f54:	200002a8 	.word	0x200002a8
 8005f58:	20000544 	.word	0x20000544

08005f5c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8005f60:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	6039      	str	r1, [r7, #0]
 8005f76:	71fb      	strb	r3, [r7, #7]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	2b23      	cmp	r3, #35	; 0x23
 8005f80:	d84a      	bhi.n	8006018 <CDC_Control_HS+0xac>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <CDC_Control_HS+0x1c>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08006019 	.word	0x08006019
 8005f8c:	08006019 	.word	0x08006019
 8005f90:	08006019 	.word	0x08006019
 8005f94:	08006019 	.word	0x08006019
 8005f98:	08006019 	.word	0x08006019
 8005f9c:	08006019 	.word	0x08006019
 8005fa0:	08006019 	.word	0x08006019
 8005fa4:	08006019 	.word	0x08006019
 8005fa8:	08006019 	.word	0x08006019
 8005fac:	08006019 	.word	0x08006019
 8005fb0:	08006019 	.word	0x08006019
 8005fb4:	08006019 	.word	0x08006019
 8005fb8:	08006019 	.word	0x08006019
 8005fbc:	08006019 	.word	0x08006019
 8005fc0:	08006019 	.word	0x08006019
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08006019 	.word	0x08006019
 8005fcc:	08006019 	.word	0x08006019
 8005fd0:	08006019 	.word	0x08006019
 8005fd4:	08006019 	.word	0x08006019
 8005fd8:	08006019 	.word	0x08006019
 8005fdc:	08006019 	.word	0x08006019
 8005fe0:	08006019 	.word	0x08006019
 8005fe4:	08006019 	.word	0x08006019
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	08006019 	.word	0x08006019
 8005ff0:	08006019 	.word	0x08006019
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006019 	.word	0x08006019
 8005ffc:	08006019 	.word	0x08006019
 8006000:	08006019 	.word	0x08006019
 8006004:	08006019 	.word	0x08006019
 8006008:	08006019 	.word	0x08006019
 800600c:	08006019 	.word	0x08006019
 8006010:	08006019 	.word	0x08006019
 8006014:	08006019 	.word	0x08006019
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006018:	bf00      	nop
  }

  return (USBD_OK);
 800601a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	4805      	ldr	r0, [pc, #20]	; (800604c <CDC_Receive_HS+0x24>)
 8006036:	f7fe fbae 	bl	8004796 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800603a:	4804      	ldr	r0, [pc, #16]	; (800604c <CDC_Receive_HS+0x24>)
 800603c:	f7fe fbee 	bl	800481c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006040:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200002a8 	.word	0x200002a8

08006050 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <CDC_Transmit_HS+0x48>)
 8006062:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006066:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8006072:	2301      	movs	r3, #1
 8006074:	e00b      	b.n	800608e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8006076:	887b      	ldrh	r3, [r7, #2]
 8006078:	461a      	mov	r2, r3
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4806      	ldr	r0, [pc, #24]	; (8006098 <CDC_Transmit_HS+0x48>)
 800607e:	f7fe fb70 	bl	8004762 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8006082:	4805      	ldr	r0, [pc, #20]	; (8006098 <CDC_Transmit_HS+0x48>)
 8006084:	f7fe fb9b 	bl	80047be <USBD_CDC_TransmitPacket>
 8006088:	4603      	mov	r3, r0
 800608a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	200002a8 	.word	0x200002a8

0800609c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	; 0x28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a4:	f107 0314 	add.w	r3, r7, #20
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <HAL_PCD_MspInit+0x94>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d134      	bne.n	8006128 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <HAL_PCD_MspInit+0x98>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <HAL_PCD_MspInit+0x98>)
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	6313      	str	r3, [r2, #48]	; 0x30
 80060ce:	4b19      	ldr	r3, [pc, #100]	; (8006134 <HAL_PCD_MspInit+0x98>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration    
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80060da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80060de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e0:	2302      	movs	r3, #2
 80060e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060e8:	2303      	movs	r3, #3
 80060ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80060ec:	230c      	movs	r3, #12
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060f0:	f107 0314 	add.w	r3, r7, #20
 80060f4:	4619      	mov	r1, r3
 80060f6:	4810      	ldr	r0, [pc, #64]	; (8006138 <HAL_PCD_MspInit+0x9c>)
 80060f8:	f7fa fb98 	bl	800082c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <HAL_PCD_MspInit+0x98>)
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	4a0b      	ldr	r2, [pc, #44]	; (8006134 <HAL_PCD_MspInit+0x98>)
 8006106:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800610a:	6313      	str	r3, [r2, #48]	; 0x30
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <HAL_PCD_MspInit+0x98>)
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	204d      	movs	r0, #77	; 0x4d
 800611e:	f7fa fb5b 	bl	80007d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8006122:	204d      	movs	r0, #77	; 0x4d
 8006124:	f7fa fb74 	bl	8000810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8006128:	bf00      	nop
 800612a:	3728      	adds	r7, #40	; 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40040000 	.word	0x40040000
 8006134:	40023800 	.word	0x40023800
 8006138:	40020400 	.word	0x40020400

0800613c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f7fe fc1a 	bl	800498c <USBD_LL_SetupStage>
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	4619      	mov	r1, r3
 800618a:	f7fe fc4a 	bl	8004a22 <USBD_LL_DataOutStage>
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80061a8:	78fa      	ldrb	r2, [r7, #3]
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	3348      	adds	r3, #72	; 0x48
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	4619      	mov	r1, r3
 80061be:	f7fe fca1 	bl	8004b04 <USBD_LL_DataInStage>
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe fdaf 	bl	8004d3c <USBD_LL_SOF>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
 80061fe:	e008      	b.n	8006212 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d102      	bne.n	800620e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
 800620c:	e001      	b.n	8006212 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800620e:	f7ff fcd3 	bl	8005bb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006218:	7bfa      	ldrb	r2, [r7, #15]
 800621a:	4611      	mov	r1, r2
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fd57 	bl	8004cd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fd10 	bl	8004c4e <USBD_LL_Reset>
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fd52 	bl	8004cf0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <HAL_PCD_SuspendCallback+0x48>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4a03      	ldr	r2, [pc, #12]	; (8006280 <HAL_PCD_SuspendCallback+0x48>)
 8006272:	f043 0306 	orr.w	r3, r3, #6
 8006276:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	e000ed00 	.word	0xe000ed00

08006284 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fd41 	bl	8004d1a <USBD_LL_Resume>
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fd67 	bl	8004d8a <USBD_LL_IsoOUTIncomplete>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062d6:	78fa      	ldrb	r2, [r7, #3]
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fd48 	bl	8004d70 <USBD_LL_IsoINIncomplete>
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fd54 	bl	8004da4 <USBD_LL_DevConnected>
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fd51 	bl	8004dba <USBD_LL_DevDisconnected>
}
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d140      	bne.n	80063b2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8006330:	4a22      	ldr	r2, [pc, #136]	; (80063bc <USBD_LL_Init+0x9c>)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a20      	ldr	r2, [pc, #128]	; (80063bc <USBD_LL_Init+0x9c>)
 800633c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006340:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <USBD_LL_Init+0x9c>)
 8006342:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <USBD_LL_Init+0xa0>)
 8006344:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <USBD_LL_Init+0x9c>)
 8006348:	2206      	movs	r2, #6
 800634a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <USBD_LL_Init+0x9c>)
 800634e:	2202      	movs	r2, #2
 8006350:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006352:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <USBD_LL_Init+0x9c>)
 8006354:	2200      	movs	r2, #0
 8006356:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8006358:	4b18      	ldr	r3, [pc, #96]	; (80063bc <USBD_LL_Init+0x9c>)
 800635a:	2202      	movs	r2, #2
 800635c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800635e:	4b17      	ldr	r3, [pc, #92]	; (80063bc <USBD_LL_Init+0x9c>)
 8006360:	2200      	movs	r2, #0
 8006362:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006364:	4b15      	ldr	r3, [pc, #84]	; (80063bc <USBD_LL_Init+0x9c>)
 8006366:	2200      	movs	r2, #0
 8006368:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800636a:	4b14      	ldr	r3, [pc, #80]	; (80063bc <USBD_LL_Init+0x9c>)
 800636c:	2200      	movs	r2, #0
 800636e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <USBD_LL_Init+0x9c>)
 8006372:	2200      	movs	r2, #0
 8006374:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <USBD_LL_Init+0x9c>)
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <USBD_LL_Init+0x9c>)
 800637e:	2200      	movs	r2, #0
 8006380:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006382:	480e      	ldr	r0, [pc, #56]	; (80063bc <USBD_LL_Init+0x9c>)
 8006384:	f7fa fc15 	bl	8000bb2 <HAL_PCD_Init>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800638e:	f7ff fc13 	bl	8005bb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8006392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006396:	4809      	ldr	r0, [pc, #36]	; (80063bc <USBD_LL_Init+0x9c>)
 8006398:	f7fb fd79 	bl	8001e8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800639c:	2280      	movs	r2, #128	; 0x80
 800639e:	2100      	movs	r1, #0
 80063a0:	4806      	ldr	r0, [pc, #24]	; (80063bc <USBD_LL_Init+0x9c>)
 80063a2:	f7fb fd2d 	bl	8001e00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80063a6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80063aa:	2101      	movs	r1, #1
 80063ac:	4803      	ldr	r0, [pc, #12]	; (80063bc <USBD_LL_Init+0x9c>)
 80063ae:	f7fb fd27 	bl	8001e00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20001544 	.word	0x20001544
 80063c0:	40040000 	.word	0x40040000

080063c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa fd06 	bl	8000dec <HAL_PCD_Start>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f92e 	bl	8006648 <USBD_Get_USB_Status>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	461a      	mov	r2, r3
 8006408:	4603      	mov	r3, r0
 800640a:	70fb      	strb	r3, [r7, #3]
 800640c:	460b      	mov	r3, r1
 800640e:	70bb      	strb	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006422:	78bb      	ldrb	r3, [r7, #2]
 8006424:	883a      	ldrh	r2, [r7, #0]
 8006426:	78f9      	ldrb	r1, [r7, #3]
 8006428:	f7fb f8db 	bl	80015e2 <HAL_PCD_EP_Open>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f908 	bl	8006648 <USBD_Get_USB_Status>
 8006438:	4603      	mov	r3, r0
 800643a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800643c:	7bbb      	ldrb	r3, [r7, #14]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7fb f924 	bl	80016b2 <HAL_PCD_EP_Close>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f8e9 	bl	8006648 <USBD_Get_USB_Status>
 8006476:	4603      	mov	r3, r0
 8006478:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800647a:	7bbb      	ldrb	r3, [r7, #14]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fb f9fc 	bl	80018a0 <HAL_PCD_EP_SetStall>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f8ca 	bl	8006648 <USBD_Get_USB_Status>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fb fa41 	bl	8001968 <HAL_PCD_EP_ClrStall>
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f8ab 	bl	8006648 <USBD_Get_USB_Status>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006512:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da0b      	bge.n	8006534 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	4613      	mov	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	333e      	adds	r3, #62	; 0x3e
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	e00b      	b.n	800654c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800654a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb f80e 	bl	8001598 <HAL_PCD_SetAddress>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f860 	bl	8006648 <USBD_Get_USB_Status>
 8006588:	4603      	mov	r3, r0
 800658a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800658c:	7bbb      	ldrb	r3, [r7, #14]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	461a      	mov	r2, r3
 80065a2:	460b      	mov	r3, r1
 80065a4:	72fb      	strb	r3, [r7, #11]
 80065a6:	4613      	mov	r3, r2
 80065a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80065b8:	893b      	ldrh	r3, [r7, #8]
 80065ba:	7af9      	ldrb	r1, [r7, #11]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	f7fb f925 	bl	800180c <HAL_PCD_EP_Transmit>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f83d 	bl	8006648 <USBD_Get_USB_Status>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80065d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	461a      	mov	r2, r3
 80065e8:	460b      	mov	r3, r1
 80065ea:	72fb      	strb	r3, [r7, #11]
 80065ec:	4613      	mov	r3, r2
 80065ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80065fe:	893b      	ldrh	r3, [r7, #8]
 8006600:	7af9      	ldrb	r1, [r7, #11]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	f7fb f89f 	bl	8001746 <HAL_PCD_EP_Receive>
 8006608:	4603      	mov	r3, r0
 800660a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f81a 	bl	8006648 <USBD_Get_USB_Status>
 8006614:	4603      	mov	r3, r0
 8006616:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006618:	7dbb      	ldrb	r3, [r7, #22]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f7fb f8cf 	bl	80017dc <HAL_PCD_EP_GetRxCount>
 800663e:	4603      	mov	r3, r0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	2b03      	cmp	r3, #3
 800665a:	d817      	bhi.n	800668c <USBD_Get_USB_Status+0x44>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <USBD_Get_USB_Status+0x1c>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006675 	.word	0x08006675
 8006668:	0800667b 	.word	0x0800667b
 800666c:	08006681 	.word	0x08006681
 8006670:	08006687 	.word	0x08006687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
    break;
 8006678:	e00b      	b.n	8006692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800667a:	2302      	movs	r3, #2
 800667c:	73fb      	strb	r3, [r7, #15]
    break;
 800667e:	e008      	b.n	8006692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
    break;
 8006684:	e005      	b.n	8006692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006686:	2302      	movs	r3, #2
 8006688:	73fb      	strb	r3, [r7, #15]
    break;
 800668a:	e002      	b.n	8006692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800668c:	2302      	movs	r3, #2
 800668e:	73fb      	strb	r3, [r7, #15]
    break;
 8006690:	bf00      	nop
  }
  return usb_status;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2212      	movs	r2, #18
 80066b0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80066b2:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	20000148 	.word	0x20000148

080066c4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	6039      	str	r1, [r7, #0]
 80066ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2204      	movs	r2, #4
 80066d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066d6:	4b03      	ldr	r3, [pc, #12]	; (80066e4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	2000015c 	.word	0x2000015c

080066e8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	6039      	str	r1, [r7, #0]
 80066f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	4907      	ldr	r1, [pc, #28]	; (800671c <USBD_HS_ProductStrDescriptor+0x34>)
 80066fe:	4808      	ldr	r0, [pc, #32]	; (8006720 <USBD_HS_ProductStrDescriptor+0x38>)
 8006700:	f7ff f832 	bl	8005768 <USBD_GetString>
 8006704:	e004      	b.n	8006710 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	4904      	ldr	r1, [pc, #16]	; (800671c <USBD_HS_ProductStrDescriptor+0x34>)
 800670a:	4805      	ldr	r0, [pc, #20]	; (8006720 <USBD_HS_ProductStrDescriptor+0x38>)
 800670c:	f7ff f82c 	bl	8005768 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006710:	4b02      	ldr	r3, [pc, #8]	; (800671c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	2000194c 	.word	0x2000194c
 8006720:	080071c4 	.word	0x080071c4

08006724 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	4904      	ldr	r1, [pc, #16]	; (8006744 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8006734:	4804      	ldr	r0, [pc, #16]	; (8006748 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8006736:	f7ff f817 	bl	8005768 <USBD_GetString>
  return USBD_StrDesc;
 800673a:	4b02      	ldr	r3, [pc, #8]	; (8006744 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	2000194c 	.word	0x2000194c
 8006748:	080071dc 	.word	0x080071dc

0800674c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	221a      	movs	r2, #26
 800675c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800675e:	f000 f843 	bl	80067e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */
  
  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8006762:	4b02      	ldr	r3, [pc, #8]	; (800676c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000160 	.word	0x20000160

08006770 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	6039      	str	r1, [r7, #0]
 800677a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	4907      	ldr	r1, [pc, #28]	; (80067a4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006786:	4808      	ldr	r0, [pc, #32]	; (80067a8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8006788:	f7fe ffee 	bl	8005768 <USBD_GetString>
 800678c:	e004      	b.n	8006798 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	4904      	ldr	r1, [pc, #16]	; (80067a4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006792:	4805      	ldr	r0, [pc, #20]	; (80067a8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8006794:	f7fe ffe8 	bl	8005768 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006798:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	2000194c 	.word	0x2000194c
 80067a8:	080071f0 	.word	0x080071f0

080067ac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d105      	bne.n	80067ca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	4907      	ldr	r1, [pc, #28]	; (80067e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80067c2:	4808      	ldr	r0, [pc, #32]	; (80067e4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80067c4:	f7fe ffd0 	bl	8005768 <USBD_GetString>
 80067c8:	e004      	b.n	80067d4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4904      	ldr	r1, [pc, #16]	; (80067e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80067ce:	4805      	ldr	r0, [pc, #20]	; (80067e4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80067d0:	f7fe ffca 	bl	8005768 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067d4:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	2000194c 	.word	0x2000194c
 80067e4:	080071fc 	.word	0x080071fc

080067e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067ee:	4b0f      	ldr	r3, [pc, #60]	; (800682c <Get_SerialNum+0x44>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <Get_SerialNum+0x48>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067fa:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <Get_SerialNum+0x4c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800680e:	2208      	movs	r2, #8
 8006810:	4909      	ldr	r1, [pc, #36]	; (8006838 <Get_SerialNum+0x50>)
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f814 	bl	8006840 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006818:	2204      	movs	r2, #4
 800681a:	4908      	ldr	r1, [pc, #32]	; (800683c <Get_SerialNum+0x54>)
 800681c:	68b8      	ldr	r0, [r7, #8]
 800681e:	f000 f80f 	bl	8006840 <IntToUnicode>
  }
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	1fff7a10 	.word	0x1fff7a10
 8006830:	1fff7a14 	.word	0x1fff7a14
 8006834:	1fff7a18 	.word	0x1fff7a18
 8006838:	20000162 	.word	0x20000162
 800683c:	20000172 	.word	0x20000172

08006840 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
 8006856:	e027      	b.n	80068a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	0f1b      	lsrs	r3, r3, #28
 800685c:	2b09      	cmp	r3, #9
 800685e:	d80b      	bhi.n	8006878 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	0f1b      	lsrs	r3, r3, #28
 8006864:	b2da      	uxtb	r2, r3
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	4619      	mov	r1, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	440b      	add	r3, r1
 8006870:	3230      	adds	r2, #48	; 0x30
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	e00a      	b.n	800688e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	0f1b      	lsrs	r3, r3, #28
 800687c:	b2da      	uxtb	r2, r3
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	4619      	mov	r1, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	440b      	add	r3, r1
 8006888:	3237      	adds	r2, #55	; 0x37
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	3301      	adds	r3, #1
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	4413      	add	r3, r2
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	3301      	adds	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
 80068a8:	7dfa      	ldrb	r2, [r7, #23]
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d3d3      	bcc.n	8006858 <IntToUnicode+0x18>
  }
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80068bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80068c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80068c2:	e003      	b.n	80068cc <LoopCopyDataInit>

080068c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80068c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80068c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80068ca:	3104      	adds	r1, #4

080068cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80068cc:	480b      	ldr	r0, [pc, #44]	; (80068fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80068d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80068d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80068d4:	d3f6      	bcc.n	80068c4 <CopyDataInit>
  ldr  r2, =_sbss
 80068d6:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80068d8:	e002      	b.n	80068e0 <LoopFillZerobss>

080068da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80068da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80068dc:	f842 3b04 	str.w	r3, [r2], #4

080068e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80068e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80068e4:	d3f9      	bcc.n	80068da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80068e6:	f7ff fadf 	bl	8005ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068ea:	f000 f817 	bl	800691c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068ee:	f7ff f8bb 	bl	8005a68 <main>
  bx  lr    
 80068f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80068f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80068f8:	08007268 	.word	0x08007268
  ldr  r0, =_sdata
 80068fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006900:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8006904:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006908:	20001b50 	.word	0x20001b50

0800690c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800690c:	e7fe      	b.n	800690c <ADC_IRQHandler>
	...

08006910 <__errno>:
 8006910:	4b01      	ldr	r3, [pc, #4]	; (8006918 <__errno+0x8>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	2000017c 	.word	0x2000017c

0800691c <__libc_init_array>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4e0d      	ldr	r6, [pc, #52]	; (8006954 <__libc_init_array+0x38>)
 8006920:	4c0d      	ldr	r4, [pc, #52]	; (8006958 <__libc_init_array+0x3c>)
 8006922:	1ba4      	subs	r4, r4, r6
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	2500      	movs	r5, #0
 8006928:	42a5      	cmp	r5, r4
 800692a:	d109      	bne.n	8006940 <__libc_init_array+0x24>
 800692c:	4e0b      	ldr	r6, [pc, #44]	; (800695c <__libc_init_array+0x40>)
 800692e:	4c0c      	ldr	r4, [pc, #48]	; (8006960 <__libc_init_array+0x44>)
 8006930:	f000 fc36 	bl	80071a0 <_init>
 8006934:	1ba4      	subs	r4, r4, r6
 8006936:	10a4      	asrs	r4, r4, #2
 8006938:	2500      	movs	r5, #0
 800693a:	42a5      	cmp	r5, r4
 800693c:	d105      	bne.n	800694a <__libc_init_array+0x2e>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006944:	4798      	blx	r3
 8006946:	3501      	adds	r5, #1
 8006948:	e7ee      	b.n	8006928 <__libc_init_array+0xc>
 800694a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800694e:	4798      	blx	r3
 8006950:	3501      	adds	r5, #1
 8006952:	e7f2      	b.n	800693a <__libc_init_array+0x1e>
 8006954:	08007260 	.word	0x08007260
 8006958:	08007260 	.word	0x08007260
 800695c:	08007260 	.word	0x08007260
 8006960:	08007264 	.word	0x08007264

08006964 <malloc>:
 8006964:	4b02      	ldr	r3, [pc, #8]	; (8006970 <malloc+0xc>)
 8006966:	4601      	mov	r1, r0
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f000 b861 	b.w	8006a30 <_malloc_r>
 800696e:	bf00      	nop
 8006970:	2000017c 	.word	0x2000017c

08006974 <free>:
 8006974:	4b02      	ldr	r3, [pc, #8]	; (8006980 <free+0xc>)
 8006976:	4601      	mov	r1, r0
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	f000 b80b 	b.w	8006994 <_free_r>
 800697e:	bf00      	nop
 8006980:	2000017c 	.word	0x2000017c

08006984 <memset>:
 8006984:	4402      	add	r2, r0
 8006986:	4603      	mov	r3, r0
 8006988:	4293      	cmp	r3, r2
 800698a:	d100      	bne.n	800698e <memset+0xa>
 800698c:	4770      	bx	lr
 800698e:	f803 1b01 	strb.w	r1, [r3], #1
 8006992:	e7f9      	b.n	8006988 <memset+0x4>

08006994 <_free_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4605      	mov	r5, r0
 8006998:	2900      	cmp	r1, #0
 800699a:	d045      	beq.n	8006a28 <_free_r+0x94>
 800699c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a0:	1f0c      	subs	r4, r1, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfb8      	it	lt
 80069a6:	18e4      	addlt	r4, r4, r3
 80069a8:	f000 f8cc 	bl	8006b44 <__malloc_lock>
 80069ac:	4a1f      	ldr	r2, [pc, #124]	; (8006a2c <_free_r+0x98>)
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	4610      	mov	r0, r2
 80069b2:	b933      	cbnz	r3, 80069c2 <_free_r+0x2e>
 80069b4:	6063      	str	r3, [r4, #4]
 80069b6:	6014      	str	r4, [r2, #0]
 80069b8:	4628      	mov	r0, r5
 80069ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069be:	f000 b8c2 	b.w	8006b46 <__malloc_unlock>
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	d90c      	bls.n	80069e0 <_free_r+0x4c>
 80069c6:	6821      	ldr	r1, [r4, #0]
 80069c8:	1862      	adds	r2, r4, r1
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bf04      	itt	eq
 80069ce:	681a      	ldreq	r2, [r3, #0]
 80069d0:	685b      	ldreq	r3, [r3, #4]
 80069d2:	6063      	str	r3, [r4, #4]
 80069d4:	bf04      	itt	eq
 80069d6:	1852      	addeq	r2, r2, r1
 80069d8:	6022      	streq	r2, [r4, #0]
 80069da:	6004      	str	r4, [r0, #0]
 80069dc:	e7ec      	b.n	80069b8 <_free_r+0x24>
 80069de:	4613      	mov	r3, r2
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	b10a      	cbz	r2, 80069e8 <_free_r+0x54>
 80069e4:	42a2      	cmp	r2, r4
 80069e6:	d9fa      	bls.n	80069de <_free_r+0x4a>
 80069e8:	6819      	ldr	r1, [r3, #0]
 80069ea:	1858      	adds	r0, r3, r1
 80069ec:	42a0      	cmp	r0, r4
 80069ee:	d10b      	bne.n	8006a08 <_free_r+0x74>
 80069f0:	6820      	ldr	r0, [r4, #0]
 80069f2:	4401      	add	r1, r0
 80069f4:	1858      	adds	r0, r3, r1
 80069f6:	4282      	cmp	r2, r0
 80069f8:	6019      	str	r1, [r3, #0]
 80069fa:	d1dd      	bne.n	80069b8 <_free_r+0x24>
 80069fc:	6810      	ldr	r0, [r2, #0]
 80069fe:	6852      	ldr	r2, [r2, #4]
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	4401      	add	r1, r0
 8006a04:	6019      	str	r1, [r3, #0]
 8006a06:	e7d7      	b.n	80069b8 <_free_r+0x24>
 8006a08:	d902      	bls.n	8006a10 <_free_r+0x7c>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	e7d3      	b.n	80069b8 <_free_r+0x24>
 8006a10:	6820      	ldr	r0, [r4, #0]
 8006a12:	1821      	adds	r1, r4, r0
 8006a14:	428a      	cmp	r2, r1
 8006a16:	bf04      	itt	eq
 8006a18:	6811      	ldreq	r1, [r2, #0]
 8006a1a:	6852      	ldreq	r2, [r2, #4]
 8006a1c:	6062      	str	r2, [r4, #4]
 8006a1e:	bf04      	itt	eq
 8006a20:	1809      	addeq	r1, r1, r0
 8006a22:	6021      	streq	r1, [r4, #0]
 8006a24:	605c      	str	r4, [r3, #4]
 8006a26:	e7c7      	b.n	80069b8 <_free_r+0x24>
 8006a28:	bd38      	pop	{r3, r4, r5, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000204 	.word	0x20000204

08006a30 <_malloc_r>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	1ccd      	adds	r5, r1, #3
 8006a34:	f025 0503 	bic.w	r5, r5, #3
 8006a38:	3508      	adds	r5, #8
 8006a3a:	2d0c      	cmp	r5, #12
 8006a3c:	bf38      	it	cc
 8006a3e:	250c      	movcc	r5, #12
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	4606      	mov	r6, r0
 8006a44:	db01      	blt.n	8006a4a <_malloc_r+0x1a>
 8006a46:	42a9      	cmp	r1, r5
 8006a48:	d903      	bls.n	8006a52 <_malloc_r+0x22>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	2000      	movs	r0, #0
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	f000 f877 	bl	8006b44 <__malloc_lock>
 8006a56:	4a21      	ldr	r2, [pc, #132]	; (8006adc <_malloc_r+0xac>)
 8006a58:	6814      	ldr	r4, [r2, #0]
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	b991      	cbnz	r1, 8006a84 <_malloc_r+0x54>
 8006a5e:	4c20      	ldr	r4, [pc, #128]	; (8006ae0 <_malloc_r+0xb0>)
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	b91b      	cbnz	r3, 8006a6c <_malloc_r+0x3c>
 8006a64:	4630      	mov	r0, r6
 8006a66:	f000 f83d 	bl	8006ae4 <_sbrk_r>
 8006a6a:	6020      	str	r0, [r4, #0]
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f000 f838 	bl	8006ae4 <_sbrk_r>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d124      	bne.n	8006ac2 <_malloc_r+0x92>
 8006a78:	230c      	movs	r3, #12
 8006a7a:	6033      	str	r3, [r6, #0]
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f000 f862 	bl	8006b46 <__malloc_unlock>
 8006a82:	e7e4      	b.n	8006a4e <_malloc_r+0x1e>
 8006a84:	680b      	ldr	r3, [r1, #0]
 8006a86:	1b5b      	subs	r3, r3, r5
 8006a88:	d418      	bmi.n	8006abc <_malloc_r+0x8c>
 8006a8a:	2b0b      	cmp	r3, #11
 8006a8c:	d90f      	bls.n	8006aae <_malloc_r+0x7e>
 8006a8e:	600b      	str	r3, [r1, #0]
 8006a90:	50cd      	str	r5, [r1, r3]
 8006a92:	18cc      	adds	r4, r1, r3
 8006a94:	4630      	mov	r0, r6
 8006a96:	f000 f856 	bl	8006b46 <__malloc_unlock>
 8006a9a:	f104 000b 	add.w	r0, r4, #11
 8006a9e:	1d23      	adds	r3, r4, #4
 8006aa0:	f020 0007 	bic.w	r0, r0, #7
 8006aa4:	1ac3      	subs	r3, r0, r3
 8006aa6:	d0d3      	beq.n	8006a50 <_malloc_r+0x20>
 8006aa8:	425a      	negs	r2, r3
 8006aaa:	50e2      	str	r2, [r4, r3]
 8006aac:	e7d0      	b.n	8006a50 <_malloc_r+0x20>
 8006aae:	428c      	cmp	r4, r1
 8006ab0:	684b      	ldr	r3, [r1, #4]
 8006ab2:	bf16      	itet	ne
 8006ab4:	6063      	strne	r3, [r4, #4]
 8006ab6:	6013      	streq	r3, [r2, #0]
 8006ab8:	460c      	movne	r4, r1
 8006aba:	e7eb      	b.n	8006a94 <_malloc_r+0x64>
 8006abc:	460c      	mov	r4, r1
 8006abe:	6849      	ldr	r1, [r1, #4]
 8006ac0:	e7cc      	b.n	8006a5c <_malloc_r+0x2c>
 8006ac2:	1cc4      	adds	r4, r0, #3
 8006ac4:	f024 0403 	bic.w	r4, r4, #3
 8006ac8:	42a0      	cmp	r0, r4
 8006aca:	d005      	beq.n	8006ad8 <_malloc_r+0xa8>
 8006acc:	1a21      	subs	r1, r4, r0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f000 f808 	bl	8006ae4 <_sbrk_r>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d0cf      	beq.n	8006a78 <_malloc_r+0x48>
 8006ad8:	6025      	str	r5, [r4, #0]
 8006ada:	e7db      	b.n	8006a94 <_malloc_r+0x64>
 8006adc:	20000204 	.word	0x20000204
 8006ae0:	20000208 	.word	0x20000208

08006ae4 <_sbrk_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4c06      	ldr	r4, [pc, #24]	; (8006b00 <_sbrk_r+0x1c>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4605      	mov	r5, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	f7ff f9ae 	bl	8005e50 <_sbrk>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_sbrk_r+0x1a>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_sbrk_r+0x1a>
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20001b4c 	.word	0x20001b4c

08006b04 <siprintf>:
 8006b04:	b40e      	push	{r1, r2, r3}
 8006b06:	b500      	push	{lr}
 8006b08:	b09c      	sub	sp, #112	; 0x70
 8006b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	9006      	str	r0, [sp, #24]
 8006b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b14:	4809      	ldr	r0, [pc, #36]	; (8006b3c <siprintf+0x38>)
 8006b16:	9107      	str	r1, [sp, #28]
 8006b18:	9104      	str	r1, [sp, #16]
 8006b1a:	4909      	ldr	r1, [pc, #36]	; (8006b40 <siprintf+0x3c>)
 8006b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b20:	9105      	str	r1, [sp, #20]
 8006b22:	6800      	ldr	r0, [r0, #0]
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	a902      	add	r1, sp, #8
 8006b28:	f000 f868 	bl	8006bfc <_svfiprintf_r>
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	b01c      	add	sp, #112	; 0x70
 8006b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b38:	b003      	add	sp, #12
 8006b3a:	4770      	bx	lr
 8006b3c:	2000017c 	.word	0x2000017c
 8006b40:	ffff0208 	.word	0xffff0208

08006b44 <__malloc_lock>:
 8006b44:	4770      	bx	lr

08006b46 <__malloc_unlock>:
 8006b46:	4770      	bx	lr

08006b48 <__ssputs_r>:
 8006b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	688e      	ldr	r6, [r1, #8]
 8006b4e:	429e      	cmp	r6, r3
 8006b50:	4682      	mov	sl, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	4690      	mov	r8, r2
 8006b56:	4699      	mov	r9, r3
 8006b58:	d837      	bhi.n	8006bca <__ssputs_r+0x82>
 8006b5a:	898a      	ldrh	r2, [r1, #12]
 8006b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b60:	d031      	beq.n	8006bc6 <__ssputs_r+0x7e>
 8006b62:	6825      	ldr	r5, [r4, #0]
 8006b64:	6909      	ldr	r1, [r1, #16]
 8006b66:	1a6f      	subs	r7, r5, r1
 8006b68:	6965      	ldr	r5, [r4, #20]
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b70:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b74:	f109 0301 	add.w	r3, r9, #1
 8006b78:	443b      	add	r3, r7
 8006b7a:	429d      	cmp	r5, r3
 8006b7c:	bf38      	it	cc
 8006b7e:	461d      	movcc	r5, r3
 8006b80:	0553      	lsls	r3, r2, #21
 8006b82:	d530      	bpl.n	8006be6 <__ssputs_r+0x9e>
 8006b84:	4629      	mov	r1, r5
 8006b86:	f7ff ff53 	bl	8006a30 <_malloc_r>
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	b950      	cbnz	r0, 8006ba4 <__ssputs_r+0x5c>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	f8ca 3000 	str.w	r3, [sl]
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b9a:	81a3      	strh	r3, [r4, #12]
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba4:	463a      	mov	r2, r7
 8006ba6:	6921      	ldr	r1, [r4, #16]
 8006ba8:	f000 faa8 	bl	80070fc <memcpy>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	81a3      	strh	r3, [r4, #12]
 8006bb8:	6126      	str	r6, [r4, #16]
 8006bba:	6165      	str	r5, [r4, #20]
 8006bbc:	443e      	add	r6, r7
 8006bbe:	1bed      	subs	r5, r5, r7
 8006bc0:	6026      	str	r6, [r4, #0]
 8006bc2:	60a5      	str	r5, [r4, #8]
 8006bc4:	464e      	mov	r6, r9
 8006bc6:	454e      	cmp	r6, r9
 8006bc8:	d900      	bls.n	8006bcc <__ssputs_r+0x84>
 8006bca:	464e      	mov	r6, r9
 8006bcc:	4632      	mov	r2, r6
 8006bce:	4641      	mov	r1, r8
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	f000 fa9e 	bl	8007112 <memmove>
 8006bd6:	68a3      	ldr	r3, [r4, #8]
 8006bd8:	1b9b      	subs	r3, r3, r6
 8006bda:	60a3      	str	r3, [r4, #8]
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	441e      	add	r6, r3
 8006be0:	6026      	str	r6, [r4, #0]
 8006be2:	2000      	movs	r0, #0
 8006be4:	e7dc      	b.n	8006ba0 <__ssputs_r+0x58>
 8006be6:	462a      	mov	r2, r5
 8006be8:	f000 faac 	bl	8007144 <_realloc_r>
 8006bec:	4606      	mov	r6, r0
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d1e2      	bne.n	8006bb8 <__ssputs_r+0x70>
 8006bf2:	6921      	ldr	r1, [r4, #16]
 8006bf4:	4650      	mov	r0, sl
 8006bf6:	f7ff fecd 	bl	8006994 <_free_r>
 8006bfa:	e7c8      	b.n	8006b8e <__ssputs_r+0x46>

08006bfc <_svfiprintf_r>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	461d      	mov	r5, r3
 8006c02:	898b      	ldrh	r3, [r1, #12]
 8006c04:	061f      	lsls	r7, r3, #24
 8006c06:	b09d      	sub	sp, #116	; 0x74
 8006c08:	4680      	mov	r8, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	d50f      	bpl.n	8006c30 <_svfiprintf_r+0x34>
 8006c10:	690b      	ldr	r3, [r1, #16]
 8006c12:	b96b      	cbnz	r3, 8006c30 <_svfiprintf_r+0x34>
 8006c14:	2140      	movs	r1, #64	; 0x40
 8006c16:	f7ff ff0b 	bl	8006a30 <_malloc_r>
 8006c1a:	6020      	str	r0, [r4, #0]
 8006c1c:	6120      	str	r0, [r4, #16]
 8006c1e:	b928      	cbnz	r0, 8006c2c <_svfiprintf_r+0x30>
 8006c20:	230c      	movs	r3, #12
 8006c22:	f8c8 3000 	str.w	r3, [r8]
 8006c26:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2a:	e0c8      	b.n	8006dbe <_svfiprintf_r+0x1c2>
 8006c2c:	2340      	movs	r3, #64	; 0x40
 8006c2e:	6163      	str	r3, [r4, #20]
 8006c30:	2300      	movs	r3, #0
 8006c32:	9309      	str	r3, [sp, #36]	; 0x24
 8006c34:	2320      	movs	r3, #32
 8006c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c3a:	2330      	movs	r3, #48	; 0x30
 8006c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c40:	9503      	str	r5, [sp, #12]
 8006c42:	f04f 0b01 	mov.w	fp, #1
 8006c46:	4637      	mov	r7, r6
 8006c48:	463d      	mov	r5, r7
 8006c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c4e:	b10b      	cbz	r3, 8006c54 <_svfiprintf_r+0x58>
 8006c50:	2b25      	cmp	r3, #37	; 0x25
 8006c52:	d13e      	bne.n	8006cd2 <_svfiprintf_r+0xd6>
 8006c54:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c58:	d00b      	beq.n	8006c72 <_svfiprintf_r+0x76>
 8006c5a:	4653      	mov	r3, sl
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4640      	mov	r0, r8
 8006c62:	f7ff ff71 	bl	8006b48 <__ssputs_r>
 8006c66:	3001      	adds	r0, #1
 8006c68:	f000 80a4 	beq.w	8006db4 <_svfiprintf_r+0x1b8>
 8006c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6e:	4453      	add	r3, sl
 8006c70:	9309      	str	r3, [sp, #36]	; 0x24
 8006c72:	783b      	ldrb	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 809d 	beq.w	8006db4 <_svfiprintf_r+0x1b8>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8e:	462f      	mov	r7, r5
 8006c90:	2205      	movs	r2, #5
 8006c92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c96:	4850      	ldr	r0, [pc, #320]	; (8006dd8 <_svfiprintf_r+0x1dc>)
 8006c98:	f7f9 fab2 	bl	8000200 <memchr>
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	b9d0      	cbnz	r0, 8006cd6 <_svfiprintf_r+0xda>
 8006ca0:	06d9      	lsls	r1, r3, #27
 8006ca2:	bf44      	itt	mi
 8006ca4:	2220      	movmi	r2, #32
 8006ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006caa:	071a      	lsls	r2, r3, #28
 8006cac:	bf44      	itt	mi
 8006cae:	222b      	movmi	r2, #43	; 0x2b
 8006cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cb4:	782a      	ldrb	r2, [r5, #0]
 8006cb6:	2a2a      	cmp	r2, #42	; 0x2a
 8006cb8:	d015      	beq.n	8006ce6 <_svfiprintf_r+0xea>
 8006cba:	9a07      	ldr	r2, [sp, #28]
 8006cbc:	462f      	mov	r7, r5
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	250a      	movs	r5, #10
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc8:	3b30      	subs	r3, #48	; 0x30
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d94d      	bls.n	8006d6a <_svfiprintf_r+0x16e>
 8006cce:	b1b8      	cbz	r0, 8006d00 <_svfiprintf_r+0x104>
 8006cd0:	e00f      	b.n	8006cf2 <_svfiprintf_r+0xf6>
 8006cd2:	462f      	mov	r7, r5
 8006cd4:	e7b8      	b.n	8006c48 <_svfiprintf_r+0x4c>
 8006cd6:	4a40      	ldr	r2, [pc, #256]	; (8006dd8 <_svfiprintf_r+0x1dc>)
 8006cd8:	1a80      	subs	r0, r0, r2
 8006cda:	fa0b f000 	lsl.w	r0, fp, r0
 8006cde:	4318      	orrs	r0, r3
 8006ce0:	9004      	str	r0, [sp, #16]
 8006ce2:	463d      	mov	r5, r7
 8006ce4:	e7d3      	b.n	8006c8e <_svfiprintf_r+0x92>
 8006ce6:	9a03      	ldr	r2, [sp, #12]
 8006ce8:	1d11      	adds	r1, r2, #4
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	9103      	str	r1, [sp, #12]
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	db01      	blt.n	8006cf6 <_svfiprintf_r+0xfa>
 8006cf2:	9207      	str	r2, [sp, #28]
 8006cf4:	e004      	b.n	8006d00 <_svfiprintf_r+0x104>
 8006cf6:	4252      	negs	r2, r2
 8006cf8:	f043 0302 	orr.w	r3, r3, #2
 8006cfc:	9207      	str	r2, [sp, #28]
 8006cfe:	9304      	str	r3, [sp, #16]
 8006d00:	783b      	ldrb	r3, [r7, #0]
 8006d02:	2b2e      	cmp	r3, #46	; 0x2e
 8006d04:	d10c      	bne.n	8006d20 <_svfiprintf_r+0x124>
 8006d06:	787b      	ldrb	r3, [r7, #1]
 8006d08:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0a:	d133      	bne.n	8006d74 <_svfiprintf_r+0x178>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	9203      	str	r2, [sp, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bfb8      	it	lt
 8006d18:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d1c:	3702      	adds	r7, #2
 8006d1e:	9305      	str	r3, [sp, #20]
 8006d20:	4d2e      	ldr	r5, [pc, #184]	; (8006ddc <_svfiprintf_r+0x1e0>)
 8006d22:	7839      	ldrb	r1, [r7, #0]
 8006d24:	2203      	movs	r2, #3
 8006d26:	4628      	mov	r0, r5
 8006d28:	f7f9 fa6a 	bl	8000200 <memchr>
 8006d2c:	b138      	cbz	r0, 8006d3e <_svfiprintf_r+0x142>
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	1b40      	subs	r0, r0, r5
 8006d32:	fa03 f000 	lsl.w	r0, r3, r0
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	4303      	orrs	r3, r0
 8006d3a:	3701      	adds	r7, #1
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	7839      	ldrb	r1, [r7, #0]
 8006d40:	4827      	ldr	r0, [pc, #156]	; (8006de0 <_svfiprintf_r+0x1e4>)
 8006d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d46:	2206      	movs	r2, #6
 8006d48:	1c7e      	adds	r6, r7, #1
 8006d4a:	f7f9 fa59 	bl	8000200 <memchr>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d038      	beq.n	8006dc4 <_svfiprintf_r+0x1c8>
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <_svfiprintf_r+0x1e8>)
 8006d54:	bb13      	cbnz	r3, 8006d9c <_svfiprintf_r+0x1a0>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	3307      	adds	r3, #7
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	3308      	adds	r3, #8
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d64:	444b      	add	r3, r9
 8006d66:	9309      	str	r3, [sp, #36]	; 0x24
 8006d68:	e76d      	b.n	8006c46 <_svfiprintf_r+0x4a>
 8006d6a:	fb05 3202 	mla	r2, r5, r2, r3
 8006d6e:	2001      	movs	r0, #1
 8006d70:	460f      	mov	r7, r1
 8006d72:	e7a6      	b.n	8006cc2 <_svfiprintf_r+0xc6>
 8006d74:	2300      	movs	r3, #0
 8006d76:	3701      	adds	r7, #1
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	250a      	movs	r5, #10
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d84:	3a30      	subs	r2, #48	; 0x30
 8006d86:	2a09      	cmp	r2, #9
 8006d88:	d903      	bls.n	8006d92 <_svfiprintf_r+0x196>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0c8      	beq.n	8006d20 <_svfiprintf_r+0x124>
 8006d8e:	9105      	str	r1, [sp, #20]
 8006d90:	e7c6      	b.n	8006d20 <_svfiprintf_r+0x124>
 8006d92:	fb05 2101 	mla	r1, r5, r1, r2
 8006d96:	2301      	movs	r3, #1
 8006d98:	4607      	mov	r7, r0
 8006d9a:	e7f0      	b.n	8006d7e <_svfiprintf_r+0x182>
 8006d9c:	ab03      	add	r3, sp, #12
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4622      	mov	r2, r4
 8006da2:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <_svfiprintf_r+0x1ec>)
 8006da4:	a904      	add	r1, sp, #16
 8006da6:	4640      	mov	r0, r8
 8006da8:	f3af 8000 	nop.w
 8006dac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006db0:	4681      	mov	r9, r0
 8006db2:	d1d6      	bne.n	8006d62 <_svfiprintf_r+0x166>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	065b      	lsls	r3, r3, #25
 8006db8:	f53f af35 	bmi.w	8006c26 <_svfiprintf_r+0x2a>
 8006dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dbe:	b01d      	add	sp, #116	; 0x74
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	ab03      	add	r3, sp, #12
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	4622      	mov	r2, r4
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <_svfiprintf_r+0x1ec>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	4640      	mov	r0, r8
 8006dd0:	f000 f882 	bl	8006ed8 <_printf_i>
 8006dd4:	e7ea      	b.n	8006dac <_svfiprintf_r+0x1b0>
 8006dd6:	bf00      	nop
 8006dd8:	08007224 	.word	0x08007224
 8006ddc:	0800722a 	.word	0x0800722a
 8006de0:	0800722e 	.word	0x0800722e
 8006de4:	00000000 	.word	0x00000000
 8006de8:	08006b49 	.word	0x08006b49

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4691      	mov	r9, r2
 8006df2:	461f      	mov	r7, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	f8c9 3000 	str.w	r3, [r9]
 8006e06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	b112      	cbz	r2, 8006e16 <_printf_common+0x2a>
 8006e10:	3301      	adds	r3, #1
 8006e12:	f8c9 3000 	str.w	r3, [r9]
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	0699      	lsls	r1, r3, #26
 8006e1a:	bf42      	ittt	mi
 8006e1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e20:	3302      	addmi	r3, #2
 8006e22:	f8c9 3000 	strmi.w	r3, [r9]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	f015 0506 	ands.w	r5, r5, #6
 8006e2c:	d107      	bne.n	8006e3e <_printf_common+0x52>
 8006e2e:	f104 0a19 	add.w	sl, r4, #25
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	f8d9 2000 	ldr.w	r2, [r9]
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	42ab      	cmp	r3, r5
 8006e3c:	dc28      	bgt.n	8006e90 <_printf_common+0xa4>
 8006e3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	3300      	adds	r3, #0
 8006e46:	bf18      	it	ne
 8006e48:	2301      	movne	r3, #1
 8006e4a:	0692      	lsls	r2, r2, #26
 8006e4c:	d42d      	bmi.n	8006eaa <_printf_common+0xbe>
 8006e4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e52:	4639      	mov	r1, r7
 8006e54:	4630      	mov	r0, r6
 8006e56:	47c0      	blx	r8
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d020      	beq.n	8006e9e <_printf_common+0xb2>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	68e5      	ldr	r5, [r4, #12]
 8006e60:	f8d9 2000 	ldr.w	r2, [r9]
 8006e64:	f003 0306 	and.w	r3, r3, #6
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	bf08      	it	eq
 8006e6c:	1aad      	subeq	r5, r5, r2
 8006e6e:	68a3      	ldr	r3, [r4, #8]
 8006e70:	6922      	ldr	r2, [r4, #16]
 8006e72:	bf0c      	ite	eq
 8006e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e78:	2500      	movne	r5, #0
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	bfc4      	itt	gt
 8006e7e:	1a9b      	subgt	r3, r3, r2
 8006e80:	18ed      	addgt	r5, r5, r3
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	341a      	adds	r4, #26
 8006e88:	454d      	cmp	r5, r9
 8006e8a:	d11a      	bne.n	8006ec2 <_printf_common+0xd6>
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e008      	b.n	8006ea2 <_printf_common+0xb6>
 8006e90:	2301      	movs	r3, #1
 8006e92:	4652      	mov	r2, sl
 8006e94:	4639      	mov	r1, r7
 8006e96:	4630      	mov	r0, r6
 8006e98:	47c0      	blx	r8
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d103      	bne.n	8006ea6 <_printf_common+0xba>
 8006e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	e7c3      	b.n	8006e32 <_printf_common+0x46>
 8006eaa:	18e1      	adds	r1, r4, r3
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	2030      	movs	r0, #48	; 0x30
 8006eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eb4:	4422      	add	r2, r4
 8006eb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	e7c5      	b.n	8006e4e <_printf_common+0x62>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4630      	mov	r0, r6
 8006eca:	47c0      	blx	r8
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d0e6      	beq.n	8006e9e <_printf_common+0xb2>
 8006ed0:	f109 0901 	add.w	r9, r9, #1
 8006ed4:	e7d8      	b.n	8006e88 <_printf_common+0x9c>
	...

08006ed8 <_printf_i>:
 8006ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006edc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	7e09      	ldrb	r1, [r1, #24]
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	296e      	cmp	r1, #110	; 0x6e
 8006ee8:	4617      	mov	r7, r2
 8006eea:	4606      	mov	r6, r0
 8006eec:	4698      	mov	r8, r3
 8006eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ef0:	f000 80b3 	beq.w	800705a <_printf_i+0x182>
 8006ef4:	d822      	bhi.n	8006f3c <_printf_i+0x64>
 8006ef6:	2963      	cmp	r1, #99	; 0x63
 8006ef8:	d036      	beq.n	8006f68 <_printf_i+0x90>
 8006efa:	d80a      	bhi.n	8006f12 <_printf_i+0x3a>
 8006efc:	2900      	cmp	r1, #0
 8006efe:	f000 80b9 	beq.w	8007074 <_printf_i+0x19c>
 8006f02:	2958      	cmp	r1, #88	; 0x58
 8006f04:	f000 8083 	beq.w	800700e <_printf_i+0x136>
 8006f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f10:	e032      	b.n	8006f78 <_printf_i+0xa0>
 8006f12:	2964      	cmp	r1, #100	; 0x64
 8006f14:	d001      	beq.n	8006f1a <_printf_i+0x42>
 8006f16:	2969      	cmp	r1, #105	; 0x69
 8006f18:	d1f6      	bne.n	8006f08 <_printf_i+0x30>
 8006f1a:	6820      	ldr	r0, [r4, #0]
 8006f1c:	6813      	ldr	r3, [r2, #0]
 8006f1e:	0605      	lsls	r5, r0, #24
 8006f20:	f103 0104 	add.w	r1, r3, #4
 8006f24:	d52a      	bpl.n	8006f7c <_printf_i+0xa4>
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6011      	str	r1, [r2, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da03      	bge.n	8006f36 <_printf_i+0x5e>
 8006f2e:	222d      	movs	r2, #45	; 0x2d
 8006f30:	425b      	negs	r3, r3
 8006f32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f36:	486f      	ldr	r0, [pc, #444]	; (80070f4 <_printf_i+0x21c>)
 8006f38:	220a      	movs	r2, #10
 8006f3a:	e039      	b.n	8006fb0 <_printf_i+0xd8>
 8006f3c:	2973      	cmp	r1, #115	; 0x73
 8006f3e:	f000 809d 	beq.w	800707c <_printf_i+0x1a4>
 8006f42:	d808      	bhi.n	8006f56 <_printf_i+0x7e>
 8006f44:	296f      	cmp	r1, #111	; 0x6f
 8006f46:	d020      	beq.n	8006f8a <_printf_i+0xb2>
 8006f48:	2970      	cmp	r1, #112	; 0x70
 8006f4a:	d1dd      	bne.n	8006f08 <_printf_i+0x30>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	f043 0320 	orr.w	r3, r3, #32
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	e003      	b.n	8006f5e <_printf_i+0x86>
 8006f56:	2975      	cmp	r1, #117	; 0x75
 8006f58:	d017      	beq.n	8006f8a <_printf_i+0xb2>
 8006f5a:	2978      	cmp	r1, #120	; 0x78
 8006f5c:	d1d4      	bne.n	8006f08 <_printf_i+0x30>
 8006f5e:	2378      	movs	r3, #120	; 0x78
 8006f60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f64:	4864      	ldr	r0, [pc, #400]	; (80070f8 <_printf_i+0x220>)
 8006f66:	e055      	b.n	8007014 <_printf_i+0x13c>
 8006f68:	6813      	ldr	r3, [r2, #0]
 8006f6a:	1d19      	adds	r1, r3, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6011      	str	r1, [r2, #0]
 8006f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e08c      	b.n	8007096 <_printf_i+0x1be>
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6011      	str	r1, [r2, #0]
 8006f80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f84:	bf18      	it	ne
 8006f86:	b21b      	sxthne	r3, r3
 8006f88:	e7cf      	b.n	8006f2a <_printf_i+0x52>
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	6825      	ldr	r5, [r4, #0]
 8006f8e:	1d18      	adds	r0, r3, #4
 8006f90:	6010      	str	r0, [r2, #0]
 8006f92:	0628      	lsls	r0, r5, #24
 8006f94:	d501      	bpl.n	8006f9a <_printf_i+0xc2>
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	e002      	b.n	8006fa0 <_printf_i+0xc8>
 8006f9a:	0668      	lsls	r0, r5, #25
 8006f9c:	d5fb      	bpl.n	8006f96 <_printf_i+0xbe>
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	4854      	ldr	r0, [pc, #336]	; (80070f4 <_printf_i+0x21c>)
 8006fa2:	296f      	cmp	r1, #111	; 0x6f
 8006fa4:	bf14      	ite	ne
 8006fa6:	220a      	movne	r2, #10
 8006fa8:	2208      	moveq	r2, #8
 8006faa:	2100      	movs	r1, #0
 8006fac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fb0:	6865      	ldr	r5, [r4, #4]
 8006fb2:	60a5      	str	r5, [r4, #8]
 8006fb4:	2d00      	cmp	r5, #0
 8006fb6:	f2c0 8095 	blt.w	80070e4 <_printf_i+0x20c>
 8006fba:	6821      	ldr	r1, [r4, #0]
 8006fbc:	f021 0104 	bic.w	r1, r1, #4
 8006fc0:	6021      	str	r1, [r4, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d13d      	bne.n	8007042 <_printf_i+0x16a>
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	f040 808e 	bne.w	80070e8 <_printf_i+0x210>
 8006fcc:	4665      	mov	r5, ip
 8006fce:	2a08      	cmp	r2, #8
 8006fd0:	d10b      	bne.n	8006fea <_printf_i+0x112>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	07db      	lsls	r3, r3, #31
 8006fd6:	d508      	bpl.n	8006fea <_printf_i+0x112>
 8006fd8:	6923      	ldr	r3, [r4, #16]
 8006fda:	6862      	ldr	r2, [r4, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	bfde      	ittt	le
 8006fe0:	2330      	movle	r3, #48	; 0x30
 8006fe2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fe6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fea:	ebac 0305 	sub.w	r3, ip, r5
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	f8cd 8000 	str.w	r8, [sp]
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	aa03      	add	r2, sp, #12
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff fef6 	bl	8006dec <_printf_common>
 8007000:	3001      	adds	r0, #1
 8007002:	d14d      	bne.n	80070a0 <_printf_i+0x1c8>
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	b005      	add	sp, #20
 800700a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800700e:	4839      	ldr	r0, [pc, #228]	; (80070f4 <_printf_i+0x21c>)
 8007010:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007014:	6813      	ldr	r3, [r2, #0]
 8007016:	6821      	ldr	r1, [r4, #0]
 8007018:	1d1d      	adds	r5, r3, #4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6015      	str	r5, [r2, #0]
 800701e:	060a      	lsls	r2, r1, #24
 8007020:	d50b      	bpl.n	800703a <_printf_i+0x162>
 8007022:	07ca      	lsls	r2, r1, #31
 8007024:	bf44      	itt	mi
 8007026:	f041 0120 	orrmi.w	r1, r1, #32
 800702a:	6021      	strmi	r1, [r4, #0]
 800702c:	b91b      	cbnz	r3, 8007036 <_printf_i+0x15e>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	f022 0220 	bic.w	r2, r2, #32
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	2210      	movs	r2, #16
 8007038:	e7b7      	b.n	8006faa <_printf_i+0xd2>
 800703a:	064d      	lsls	r5, r1, #25
 800703c:	bf48      	it	mi
 800703e:	b29b      	uxthmi	r3, r3
 8007040:	e7ef      	b.n	8007022 <_printf_i+0x14a>
 8007042:	4665      	mov	r5, ip
 8007044:	fbb3 f1f2 	udiv	r1, r3, r2
 8007048:	fb02 3311 	mls	r3, r2, r1, r3
 800704c:	5cc3      	ldrb	r3, [r0, r3]
 800704e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007052:	460b      	mov	r3, r1
 8007054:	2900      	cmp	r1, #0
 8007056:	d1f5      	bne.n	8007044 <_printf_i+0x16c>
 8007058:	e7b9      	b.n	8006fce <_printf_i+0xf6>
 800705a:	6813      	ldr	r3, [r2, #0]
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	6961      	ldr	r1, [r4, #20]
 8007060:	1d18      	adds	r0, r3, #4
 8007062:	6010      	str	r0, [r2, #0]
 8007064:	0628      	lsls	r0, r5, #24
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	d501      	bpl.n	800706e <_printf_i+0x196>
 800706a:	6019      	str	r1, [r3, #0]
 800706c:	e002      	b.n	8007074 <_printf_i+0x19c>
 800706e:	066a      	lsls	r2, r5, #25
 8007070:	d5fb      	bpl.n	800706a <_printf_i+0x192>
 8007072:	8019      	strh	r1, [r3, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	4665      	mov	r5, ip
 800707a:	e7b9      	b.n	8006ff0 <_printf_i+0x118>
 800707c:	6813      	ldr	r3, [r2, #0]
 800707e:	1d19      	adds	r1, r3, #4
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	681d      	ldr	r5, [r3, #0]
 8007084:	6862      	ldr	r2, [r4, #4]
 8007086:	2100      	movs	r1, #0
 8007088:	4628      	mov	r0, r5
 800708a:	f7f9 f8b9 	bl	8000200 <memchr>
 800708e:	b108      	cbz	r0, 8007094 <_printf_i+0x1bc>
 8007090:	1b40      	subs	r0, r0, r5
 8007092:	6060      	str	r0, [r4, #4]
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	6123      	str	r3, [r4, #16]
 8007098:	2300      	movs	r3, #0
 800709a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709e:	e7a7      	b.n	8006ff0 <_printf_i+0x118>
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	462a      	mov	r2, r5
 80070a4:	4639      	mov	r1, r7
 80070a6:	4630      	mov	r0, r6
 80070a8:	47c0      	blx	r8
 80070aa:	3001      	adds	r0, #1
 80070ac:	d0aa      	beq.n	8007004 <_printf_i+0x12c>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	079b      	lsls	r3, r3, #30
 80070b2:	d413      	bmi.n	80070dc <_printf_i+0x204>
 80070b4:	68e0      	ldr	r0, [r4, #12]
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	4298      	cmp	r0, r3
 80070ba:	bfb8      	it	lt
 80070bc:	4618      	movlt	r0, r3
 80070be:	e7a3      	b.n	8007008 <_printf_i+0x130>
 80070c0:	2301      	movs	r3, #1
 80070c2:	464a      	mov	r2, r9
 80070c4:	4639      	mov	r1, r7
 80070c6:	4630      	mov	r0, r6
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d09a      	beq.n	8007004 <_printf_i+0x12c>
 80070ce:	3501      	adds	r5, #1
 80070d0:	68e3      	ldr	r3, [r4, #12]
 80070d2:	9a03      	ldr	r2, [sp, #12]
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	42ab      	cmp	r3, r5
 80070d8:	dcf2      	bgt.n	80070c0 <_printf_i+0x1e8>
 80070da:	e7eb      	b.n	80070b4 <_printf_i+0x1dc>
 80070dc:	2500      	movs	r5, #0
 80070de:	f104 0919 	add.w	r9, r4, #25
 80070e2:	e7f5      	b.n	80070d0 <_printf_i+0x1f8>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1ac      	bne.n	8007042 <_printf_i+0x16a>
 80070e8:	7803      	ldrb	r3, [r0, #0]
 80070ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070f2:	e76c      	b.n	8006fce <_printf_i+0xf6>
 80070f4:	08007235 	.word	0x08007235
 80070f8:	08007246 	.word	0x08007246

080070fc <memcpy>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	1e43      	subs	r3, r0, #1
 8007100:	440a      	add	r2, r1
 8007102:	4291      	cmp	r1, r2
 8007104:	d100      	bne.n	8007108 <memcpy+0xc>
 8007106:	bd10      	pop	{r4, pc}
 8007108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800710c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007110:	e7f7      	b.n	8007102 <memcpy+0x6>

08007112 <memmove>:
 8007112:	4288      	cmp	r0, r1
 8007114:	b510      	push	{r4, lr}
 8007116:	eb01 0302 	add.w	r3, r1, r2
 800711a:	d807      	bhi.n	800712c <memmove+0x1a>
 800711c:	1e42      	subs	r2, r0, #1
 800711e:	4299      	cmp	r1, r3
 8007120:	d00a      	beq.n	8007138 <memmove+0x26>
 8007122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007126:	f802 4f01 	strb.w	r4, [r2, #1]!
 800712a:	e7f8      	b.n	800711e <memmove+0xc>
 800712c:	4283      	cmp	r3, r0
 800712e:	d9f5      	bls.n	800711c <memmove+0xa>
 8007130:	1881      	adds	r1, r0, r2
 8007132:	1ad2      	subs	r2, r2, r3
 8007134:	42d3      	cmn	r3, r2
 8007136:	d100      	bne.n	800713a <memmove+0x28>
 8007138:	bd10      	pop	{r4, pc}
 800713a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800713e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007142:	e7f7      	b.n	8007134 <memmove+0x22>

08007144 <_realloc_r>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	4607      	mov	r7, r0
 8007148:	4614      	mov	r4, r2
 800714a:	460e      	mov	r6, r1
 800714c:	b921      	cbnz	r1, 8007158 <_realloc_r+0x14>
 800714e:	4611      	mov	r1, r2
 8007150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007154:	f7ff bc6c 	b.w	8006a30 <_malloc_r>
 8007158:	b922      	cbnz	r2, 8007164 <_realloc_r+0x20>
 800715a:	f7ff fc1b 	bl	8006994 <_free_r>
 800715e:	4625      	mov	r5, r4
 8007160:	4628      	mov	r0, r5
 8007162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007164:	f000 f814 	bl	8007190 <_malloc_usable_size_r>
 8007168:	42a0      	cmp	r0, r4
 800716a:	d20f      	bcs.n	800718c <_realloc_r+0x48>
 800716c:	4621      	mov	r1, r4
 800716e:	4638      	mov	r0, r7
 8007170:	f7ff fc5e 	bl	8006a30 <_malloc_r>
 8007174:	4605      	mov	r5, r0
 8007176:	2800      	cmp	r0, #0
 8007178:	d0f2      	beq.n	8007160 <_realloc_r+0x1c>
 800717a:	4631      	mov	r1, r6
 800717c:	4622      	mov	r2, r4
 800717e:	f7ff ffbd 	bl	80070fc <memcpy>
 8007182:	4631      	mov	r1, r6
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff fc05 	bl	8006994 <_free_r>
 800718a:	e7e9      	b.n	8007160 <_realloc_r+0x1c>
 800718c:	4635      	mov	r5, r6
 800718e:	e7e7      	b.n	8007160 <_realloc_r+0x1c>

08007190 <_malloc_usable_size_r>:
 8007190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007194:	1f18      	subs	r0, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	bfbc      	itt	lt
 800719a:	580b      	ldrlt	r3, [r1, r0]
 800719c:	18c0      	addlt	r0, r0, r3
 800719e:	4770      	bx	lr

080071a0 <_init>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	bf00      	nop
 80071a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a6:	bc08      	pop	{r3}
 80071a8:	469e      	mov	lr, r3
 80071aa:	4770      	bx	lr

080071ac <_fini>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr
